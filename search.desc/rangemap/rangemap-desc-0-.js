searchState.loadedDescShard("rangemap", 0, "<code>RangeMap</code> and <code>RangeInclusiveMap</code> are map data structures …\nSuccessor and predecessor functions defined for <code>T</code>, but as …\nMinimal version of unstable <code>Step</code> trait from the Rust …\nReturns the <em>successor</em> of <code>self</code>.\nReturns the <em>successor</em> of value <code>start</code>.\nCreate a <code>RangeInclusiveMap</code> from key-value pairs.\nCreate a <code>RangeInclusiveSet</code> from a list of ranges.\nCreate a <code>RangeMap</code> from key-value pairs.\nCreate a <code>RangeSet</code> from a list of ranges.\nReturns the <em>predecessor</em> of <code>self</code>.\nReturns the <em>predecessor</em> of value <code>start</code>.\nAn iterator over all ranges not covered by a …\nAn owning iterator over the entries of a <code>RangeInclusiveMap</code>…\nAn iterator over the entries of a <code>RangeInclusiveMap</code>, …\nAn iterator over all stored ranges partially or completely …\nA map whose keys are stored as ranges bounded inclusively …\nClears the map, removing all elements.\nReturns <code>true</code> if any range in the map covers the specified …\nReturns the first range-value pair in this map, if one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an iterator over all the maximally-sized ranges …\nReturns a reference to the value corresponding to the …\nReturns the range-value pair (as a pair of references) …\nInsert a pair of key range and value into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map contains no elements.\nGets an iterator over all pairs of key range and value, …\nReturns the last range-value pair in this map, if one …\nReturns the number of elements in the map.\nMakes a new empty <code>RangeInclusiveMap</code>.\nMakes a new empty <code>RangeInclusiveMap</code>, specifying successor …\nGets an iterator over all the stored ranges that are …\nReturns <code>true</code> if any range in the map completely or …\nRemoves a range from the map, if all or any of it was …\nAn iterator over all ranges not covered by a …\nIntersection iterator over two <code>RangeInclusiveSet</code>.\nAn owning iterator over the ranges of a <code>RangeInclusiveSet</code>.\nAn iterator over the ranges of a <code>RangeInclusiveSet</code>.\nAn iterator over all stored ranges partially or completely …\nA set whose items are stored as ranges bounded inclusively …\nUnion iterator over two <code>RangeInclusiveSet</code>.\nClears the set, removing all elements.\nReturns <code>true</code> if any range in the set covers the specified …\nReturns the first range in the set, if one exists. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an iterator over all the maximally-sized ranges …\nReturns a reference to the range covering the given key, …\nInsert a range into the set.\nReturn an iterator over the intersection of two range sets.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set contains no elements.\nGets an ordered iterator over all ranges, ordered by range.\nReturns the last range in the set, if one exists. The …\nReturns the number of elements in the set.\nMakes a new empty <code>RangeInclusiveSet</code>.\nMakes a new empty <code>RangeInclusiveSet</code>, specifying successor …\nGets an iterator over all the stored ranges that are …\nReturns <code>true</code> if any range in the set completely or …\nRemoves a range from the set, if all or any of it was …\nReturn an iterator over the union of two range sets.\nAn iterator over all ranges not covered by a <code>RangeMap</code>.\nAn owning iterator over the entries of a <code>RangeMap</code>, ordered …\nAn iterator over the entries of a <code>RangeMap</code>, ordered by key …\nAn iterator over all stored ranges partially or completely …\nA map whose keys are stored as (half-open) ranges bounded …\nClears the map, removing all elements.\nReturns <code>true</code> if any range in the map covers the specified …\nReturns the first range-value pair in this map, if one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an iterator over all the maximally-sized ranges …\nReturns a reference to the value corresponding to the …\nReturns the range-value pair (as a pair of references) …\nInsert a pair of key range and value into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map contains no elements.\nGets an iterator over all pairs of key range and value, …\nReturns the last range-value pair in this map, if one …\nReturns the number of elements in the map.\nMakes a new empty <code>RangeMap</code>.\nGets an iterator over all the stored ranges that are …\nReturns <code>true</code> if any range in the map completely or …\nRemoves a range from the map, if all or any of it was …\nAn iterator over all ranges not covered by a <code>RangeSet</code>.\nIntersection iterator over two <code>RangeSet</code>.\nAn owning iterator over the ranges of a <code>RangeSet</code>.\nAn iterator over the ranges of a <code>RangeSet</code>.\nAn iterator over all stored ranges partially or completely …\nA set whose items are stored as (half-open) ranges bounded …\nUnion iterator over two <code>RangeSet</code>.\nClears the set, removing all elements.\nReturns <code>true</code> if any range in the set covers the specified …\nReturns the first range in the set, if one exists. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an iterator over all the maximally-sized ranges …\nReturns a reference to the range covering the given key, …\nInsert a range into the set.\nReturn an iterator over the intersection of two range sets.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set contains no elements.\nGets an ordered iterator over all ranges, ordered by range.\nReturns the last range in the set, if one exists. The …\nReturns the number of elements in the set.\nMakes a new empty <code>RangeSet</code>.\nGets an iterator over all the stored ranges that are …\nReturns <code>true</code> if any range in the set completely or …\nRemoves a range from the set, if all or any of it was …\nReturn an iterator over the union of two range sets.")