searchState.loadedDescShard("swash", 0, "Font introspection, complex text shaping and glyph …\nModification performed by a feature.\nAdjusts the position of one or more glyphs such as in …\nAttaches one glyph to another such as in accent mark …\nPrimary attributes for font classification: stretch, …\nCollection of bitmaps of a specific size and format.\nUsable with both light and dark backgrounds.\nUniquely generated value for identifying and caching fonts.\nMaps characters to nominal glyph identifiers.\nCollection of colors.\nUsable with dark backgrounds.\nTypographic rule that produces modifications to a sequence …\nReference to the content of a font file.\nReference to a font.\nGlyph identifier.\nGlyph advances, side bearings and vertical origins.\nNamed instance in a variable font.\nUsable with light backgrounds.\nRepresents a single localized string in a font.\nGlobal font metrics.\nNormalized variation coordinate in 2.14 fixed point format.\nAngle of an oblique style in degrees from -90 to 90.\nSetting combining a tag and a value for features and …\nVisual width of a font– a relative change from the …\nIdentifier for well-known localized strings in a font.\nVisual style or ‘slope’ of a font.\nReplaces one or more glyphs such as in ligation.\nSynthesis suggestions for mismatched font attributes.\nSource that can provide table data by tag.\nFour byte tag value.\nTheme of a palette with respect to background color.\nAxis of variation in a variable font.\nVisual weight class of a font on a scale from 1 to 1000.\nScript, language and associated typographic features …\nReturns the action of the feature.\nReturns the vertical advance for the specified glyph.\nReturns the horizontal advance for the specified glyph.\nReturns an iterator over the alpha bitmap strikes for the …\nReturns true if any synthesis suggestions are available.\nDistance from the baseline to the top of the alignment box.\nReturns the primary attributes for the font.\nAverage width of all non-zero characters in the font.\nReturns the bit depth of the strike.\nDistance from the baseline to the top of a typical English …\nReturns the character map for the font.\nReturns an iterator over the sequence of characters …\nReturns an iterator over the color palettes for the font.\nReturns an iterator over the color bitmap strikes for the …\nReturns true if the specified glyph is covered by the …\nReturns the underlying data.\nFull content of a file containing the font.\nReturns the default value of the variation.\nDistance from the baseline to the bottom of the alignment …\nReturns true if the scaler should apply a faux bold.\nInvokes the specified closure with all codepoint/glyph …\nReturns an iterator over the features provided by the …\nReturns an iterator over the features supported by a font.\nReturns an iterator over the available fonts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new oblique angle from degrees.\nCreates a new oblique style with the specified angle in …\nExtracts the attributes from the specified font.\nCreates a character map from the specified font.\nCreates a new oblique angle from gradians.\nCreates a new font from the specified font data and the …\nCreates a new font from the specified font data and offset …\nCreates a stretch attribute from a percentage. The value …\nCreates a new oblique angle from radians.\nCreates a new oblique angle from turns.\nReturns the font at the specified index.\nReturns the color for the specified entry in RGBA order.\nReturns the number of glyphs in the font.\nNumber of glyphs in the font.\nReturns glyph metrics for the font and the specified …\nReturns true if the font has a variation for the italic …\nReturns true if the font has a variation for the oblique …\nReturns true if the font has a variation for the stretch …\nReturns true if the font has variations corresponding to …\nReturns true if variations are supported.\nReturns true if the font provides canonical vertical glyph …\nTrue if the font provides canonical vertical metrics.\nReturns true if the font has a variation for the weight …\nReturns the string identifier.\nReturns the index of the palette.\nReturns the index of the variation.\nReturns the index of the instance.\nReturns an iterator over the named instances for the font.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the data represents a font collection.\nReturns true if the stretch is condensed (less than …\nReturns true if the string can be decoded.\nReturns true if there are no available fonts.\nReturns whether this palette is empty.\nReturns true if the stretch is expanded (greater than …\nReturns true if the variation should be hidden from users.\nTrue if the font is monospace.\nReturns true if the stretch is normal.\nReturns true if the encoding for the string is unicode.\nCollection of various iterators over metadata contained in …\nKey for identifying a font in various caches.\nReturns the language for the writing system.\nReturns the language of the string.\nReturns the OpenType language tag for the writing system.\nRecommended additional spacing between lines.\nReturns the number of available fonts.\nReturns the number of color entries in the palette.\nCreates a new set of metrics scaled by the specified …\nCreates a new set of metrics scaled by the specified …\nReturns an iterator over the localized strings for the …\nReturns the left side bearing for the specified glyph.\nReturns a nominal glyph identifier for the specified …\nReturns the maximum value of the variation.\nMaximum advance width of all characters in the font.\nReturns metrics for the font and the specified normalized …\nReturns the minimum value of the variation.\nReturns the name of the feature, if available.\nReturns the name for the palette, optionally for a …\nReturns the name for the variation, optionally for a …\nReturns the name for the instance, optionally for a …\nReturns the name identifier for the palette, if available.\nReturns the name identifier for the variation.\nReturns the name identifier for the instance.\nCreates new font attributes from the specified stretch, …\nGenerates a new cache key.\nCreates font data from the specified bytes. Returns <code>None</code> …\nComputes a normalized coordinate for the specified value.\nReturns an iterator over the normalized coordinates for …\nOffset to the table directory of the font.\nParses a style from a CSS style value.\nParses a CSS style font weight attribute.\nParses the stretch from a CSS style keyword or a …\nParses a feature setting according to the CSS grammar.\nParses a variation setting according to the CSS grammar.\nParses a comma separated list of variation settings …\nParses a comma separated list of feature settings …\nReturns a tuple containing all attributes.\nReturns the PostScript name for the instance, optionally …\nReturns the PostScript name identifier for the instance.\nReturns the size of the strike in pixels per em.\nReturns the device pixel density for which the strike was …\nProxies used to efficiently rematerialize metadata.\nReturns the associated proxy.\nReturns the raw value of the stretch attribute.\nScaling, hinting and rasterization of visual glyph …\nCreates a new set of metrics scaled for the specified …\nCreates a new set of metrics scaled for the specified …\nReturns the script for the writing system.\nReturns the OpenType script tag for the writing system.\nMapping complex text to a sequence of positioned glyphs.\nReturns a skew angle for faux italic/oblique, if requested.\nReturns the stretch attribute.\nRecommended distance from the baseline to the top of a …\nRecommended thickness of an underline or strikeout stroke.\nReturns the style attribute.\nReturns a synthesis analysis based on the requested …\nReturns the table data for the specified tag.\nReturns the table for the specified tag.\nReturns the feature tag.\nReturns the tag that identifies the variation.\nThe tag that identifies the setting.\nCreates a tag from four bytes.\nCreates a tag from the first four bytes of a string, …\nCharacter properties and textual analysis.\nReturns the oblique angle in degrees.\nReturns the angle of the style in degrees.\nConverts the stretch value to a percentage.\nReturns the top side bearing for the specified glyph.\nRecommended distance from the baseline to the top of an …\nReturns the number of font design units per em unit.\nNumber of font design units per em unit.\nReturns the theme usability of the palette, if available.\nReturns the underlying value of the key.\nThe value for the setting.\nReturns an iterator over the variation values of the …\nReturns the variations that should be applied to match the …\nReturns an iterator over the variations for the font.\nDistance from the vertical center baseline to the right …\nDistance from the vertical center baseline to the left …\nRecommended additional spacing between columns.\nReturns the vertical origin for the specified glyph id.\nReturns the weight attribute.\nReturns an iterator over writing systems supported by the …\nDistance from the baseline to the top of the lowercase “x…\nIterator over a collection of bitmap strikes.\nIterator over the characters in a localized string.\nIterator over a collection of color palettes.\nIterator over a collection of typographic features.\nIterator over a collection of fonts.\nIterator over a collection of named variation instances.\nIterator over a collection of localized strings.\nIterator over a collection of font variations.\nIterator over a collection of writing systems.\nSearches for a strike that exactly matches the specified …\nSearches for a string with the specified identifier, and …\nSearches for a strike with the largest size that contains …\nSearches for an instance with the specified name.\nSearches for a strike that matches the specified size and …\nSearches for an instance with the specified PostScript …\nSearches for a variation with the specified tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the set of normalized coordinates …\nProxy for rematerializing strike collections.\nProxy for rematerializing a character map.\nProxy for rematerializing metrics.\nProxy for rematerializing variations collections.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates character map proxy from the specified font.\nCreates a metrics proxy for the specified font.\nCreates strike collection proxy from the specified font.\nCreates a variations proxy from the specified font.\nReturns the number of glyphs in the font.\nReturns true if the font has alpha bitmap strikes.\nReturns true if the font has color bitmap strikes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterializes a character map from the specified font. This …\nMaterializes variations from the specified font. This …\nMaterializes an alpha strike iterator for the specified …\nMaterializes a color strike iterator for the specified …\nMaterializes glyph metrics for the specified font and …\nMaterializes font metrics for the specified font and …\nReturns the number of font design units per em unit.\nLoad a bitmap of the best available size.\nEmbedded alpha bitmaps.\nEmbedded color bitmaps.\nLayered color scalable outlines.\nLoad a bitmap only if the exact size is available.\nLoad a bitmap from the specified strike.\nLoads a bitmap of the largest size available.\nScalable outlines.\nIndex of a color palette.\nBuilder type for rendering a glyph into an image.\nContext that manages caches and scratch buffers for …\nScales outline and bitmap glyphs.\nBuilder for configuring a scaler.\nGlyph sources for the renderer.\nIndex of a bitmap strike.\nBitmap strike selection mode.\nBuilds a scaler for the current configuration.\nCreates a new builder for constructing a scaler with this …\nCreates a new builder for constructing a scaler with this …\nSpecifies an RGBA color to use when rasterizing layers of …\nSpecifies the strength of a faux bold transform to apply …\nSpecifies the target format for rasterizing an outline. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if alpha bitmaps are available.\nReturns true if color bitmaps are available.\nReturns true if scalable color glyph outlines are …\nReturns true if scalable glyph outlines are available.\nSpecifies whether to apply hinting to outlines. The …\nRendered glyph image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new scaling context.\nCreates a new builder for configuring rendering using the …\nSpecifies the variation settings in terms of normalized …\nSpecifies an additional offset to apply when rasterizing …\nGlyph outline.\nRenders the specified glyph using the current …\nRenders the specified glyph using the current …\nScales a bitmap for the specified glyph and mode.\nScales a bitmap for the specified glyph and mode into the …\nScales a color bitmap for the specified glyph and mode.\nScales a color bitmap for the specified glyph and mode …\nScales a color outline for the specified glyph.\nScales a color outline for the specified glyph into the …\nScales an outline for the specified glyph.\nScales an outline for the specified glyph into the …\nSpecifies the font size in pixels per em. The default …\nSpecifies the path style to use when rasterizing an …\nSpecifies a transformation matrix to apply when …\nAdds variation settings to the scaler.\nCreates a new scaling context with the specified maximum …\n32-bit RGBA bitmap.\nContent of a scaled glyph image.\nScaled glyph image.\n8-bit alpha mask.\n32-bit RGBA subpixel mask.\nResets the image to a default state.\nContent of the image.\nRaw image data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty scaled image.\nOffset and size of the image.\nSource of the image.\nReference to a layer in a scaled outline.\nMutable reference to a layer in a scaled outline.\nScaled glyph outline represented as a collection of layers …\nComputes the bounding box of the layer.\nComputes the bounding box of the outline.\nComputes the bounding box of the layer.\nClears the outline.\nReturns the color index for the layer.\nReturns the color index for the layer.\nApplies a faux bold to this layer with the specified …\nApplies a faux bold to the outline with the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the layer at the specified index.\nReturns a mutable reference to the layer at the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the outline has color layers.\nReturns true if there are no layers in the outline.\nReturns the number of layers in the outline.\nCreates a new empty outline.\nReturns path data for the layer.\nReturns path data for the outline.\nReturns path data for the layer.\nReturns the sequence of points for the layer.\nReturns a reference to the sequence of points in the …\nReturns the sequence of points for the layer.\nReturns a mutable reference the sequence of points for the …\nReturns a mutable reference to the sequence of points in …\nTransforms this layer by the specified matrix.\nTransforms the outline by the specified matrix.\nReturns the sequence of verbs for the layer.\nReturns a reference to the sequence of verbs in the …\nReturns the sequence of verbs for the layer.\nText direction.\nContext that manages caches and transient buffers for …\nMaps character clusters to positioned glyph clusters …\nBuilder for configuring a shaper.\nAdds a character cluster to the shaper.\nAdds a string to the shaper.\nBuilds a shaper for the current configuration.\nCreates a new builder for constructing a shaper with this …\nCreates a new builder for constructing a shaper with this …\nGlyph cluster modeling– output from the shaper.\nSpecifies the text direction. The default value is …\nAdds feature settings to the shaper.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSpecifies whether to insert dotted circles for broken …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies the language. The default value is <code>None</code>.\nReturns the current font metrics in use by the shaper.\nCreates a new shaping context.\nSpecifies the variation settings in terms of normalized …\nReturns the current normalized variation coordinates in …\nSpecifies whether characters defined as default ignorable …\nSpecifies the script. The default value is <code>Script::Latin</code>.\nShapes the text and invokes the specified closure with each\nSpecifies the font size in pixels per em. The default …\nAdds variation settings to the shaper.\nCreates a new shaping context with the specified maximum …\nGlyph identifier and positioning information as a result …\nCollection of glyphs and associated metadata corresponding …\nInformation for a glyph.\nComputes the full advance width or height of the cluster.\nAdvance width or height.\nIf the cluster is a ligature, this contains the source …\nArbitrary user data.\nArbitrary user data– taken from the initial character of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSequence of glyphs for the cluster. May be empty for …\nGlyph identifier.\nGlyph flags.\nInformation about the textual content of the cluster.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the cluster is complex– that is if it …\nReturns true if the cluster is empty. Empty clusters still …\nReturns true if the cluster corresponds to multiple source …\nReturns true if the glyph is an attached mark.\nReturns true if the cluster contains a single glyph. Note …\nFull source range of the cluster in original units …\nHorizontal offset.\nVertical offset.\nIterator that yields Unicode properties and boundary …\nProperty for the bidirectional algorithm.\nUnicode block property.\nBracket type of a character.\nBreaking treats numeric, alphabetic, and Southeast Asian …\nUnicode general category property.\nChinese, Japanese and Korean languages.\nA closing bracket with the associated opening bracket.\nProperty for the cluster breaking algorithm.\nTrait that exposes Unicode properties for the <code>char</code> type.\nDecomposition of a character.\nJoining type property.\nBreaking between typographic letter units or the NU, AL, …\nRepresentation of a language and its associated script and …\nProperty for the line breaking algorithm.\nNot a bracket.\nWords can be broken according to their normal Unicode …\nAn opening bracket with the associated closing bracket.\nCompact, constant time reference to Unicode properties for …\nUnicode script property.\nThe version of the Unicode Character Database used to …\nProperty for the word breaking algorithm.\nWord breaking strength (corresponds to …\nReturns an iterator yielding unicode properties and …\nReturns the bidirectional type of the character.\nReturns the bidirectional type of the character.\nReturns the bidirectional type of the character.\nReturns the unicode block that contains the character.\nReturns the unicode block that contains the character.\nReturns the unicode block that contains the character.\nReturns the bracket type of the character.\nReturns the category of the character.\nReturns the category of the character.\nReturns the category of the character.\nReturns the sequence of characters that represent the …\nReturns the CJK language.\nIf the character is an opening bracket, returns its …\nScript aware cluster segmentation.\nReturns the cluster break property for the character.\nReturns the cluster break property for the character.\nReturns the cluster break property for the character.\nReturns the canonical combining class of the character.\nReturns the canonical combining class of the character.\nReturns the canonical combining class of the character.\nReturns the composition of two characters, if any.\nReturns the canonical decomposition of the character.\nReturns the compatibility decomposition of the character.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the language associated with the specified …\nReturns the script associated with the specified OpenType …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the character is a closing bracket.\nReturns true if the script requires complex shaping.\nReturns true if the character is an emoji.\nReturns true if the character is an emoji.\nReturns true if the character is an emoji.\nReturns true if the character is an extended pictographic …\nReturns true if the character is an extended pictographic …\nReturns true if the character is an extended pictographic …\nReturns true if the script has cursive joining.\nReturns true if the character is an opening bracket.\nReturns the joining type of the character.\nReturns the joining type of the character.\nReturns the joining type of the character.\nReturns the language component.\nReturns the line break property for the character.\nReturns the line break property for the character.\nReturns the line break property for the character.\nReturns the bidi class as a 32 bit bitmask.\nReturns the mirror of the character, if any.\nReturns the name of the language.\nReturns the name of the script.\nReturns true if the analysis indicates that bidi …\nReturns true if the presence of this bidi class requires …\nIf the character is a closing bracket, returns its opening …\nParses a language tag.\nReturns the codepoint properties.\nReturns the region component.\nReturns the script to which the character belongs.\nReturns the script to which the character belongs.\nReturns the script component.\nReturns the script to which the character belongs.\nSets the word breaking strength that will be used to …\nReturns the associated OpenType language tag.\nReturns the script as an OpenType tag.\nReturns the word break property for the character.\nReturns the word break property for the character.\nReturns the word break property for the character.\nAnusvara class.\nBase character.\nBoundary type of a character or cluster.\nCharacter output from the cluster parser.\nCharacter cluster; output from the parser and input to the …\nInformation about a character including unicode properties …\nInformation about a cluster including content properties …\nEmoji with color presentation.\nComplete mapping.\nControl character.\nEmoji with default presentation.\nMapping should be skipped.\nPresentation mode for an emoji cluster.\nHalant modifier.\nThe best mapping so far.\nMyanmar three character prefix.\nPotential line break.\nThe maximum number of characters in a single cluster.\nMandatory line break.\nMark character.\nMedial consonant Ra.\nNewline (CR, LF, or CRLF).\nNon-breaking space (U+00A0).\nNot an emoji.\nNot a space.\nNot a boundary.\nOther character.\nOther space.\nParser that accepts a sequence of characters and outputs …\nPre-base form.\nReph form.\nShaping class of a character.\nSource range of a cluster in code units.\nStandard space.\nIterative status of mapping a character cluster to nominal …\nHorizontal tab.\nEmoji with text presentation.\nCharacter input to the cluster parser.\nArbitrary user data that can be associated with a …\nBelow base dependent vowel.\nPre-base vowel modifier.\nPre-base dependent vowel.\nVariation selector.\nWhitespace content of a cluster.\nStart of a word.\nZero width joiner.\nZero width non-joiner.\nReturns the boundary state.\nReturns the boundary state of the cluster.\nThe character.\nThe character.\nReturns the sequence of characters in the cluster.\nResets the cluster to the initial empty state.\nTrue if the character should be considered when mapping …\nArbitrary user data.\nArbitrary user data.\nReturns the emoji presentation mode of the cluster.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNominal glyph identifier.\nTrue if the character is ignorable.\nReturns the cluster information.\nCharacter information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the cluster is a boundary.\nReturns true if the cluster is missing an appropriate base …\nReturns true if the cluster is an emoji.\nReturns true if the cluster is empty.\nReturns true for space or no break space.\nReturns true if the cluster is whitespace.\nJoining type of the character.\nLength of the character in code units.\nApplies a nominal glyph identifier mapping to the cluster, …\nReturns the currently mapped sequence of characters in the …\nCreates a new cluster parser for the specified script and …\nCreates a new empty cluster.\nCreates new character information from Unicode properties …\nParses the next cluster.\nOffset of the character in code units.\nOffset of the character in code units.\nReturns the unicode properties for the character.\nReturns the source range for the cluster in code units.\nShaping class of the character.\nConverts the source range into a <code>usize</code> range.\nReturns the primary user data for the cluster.\nReturns the whitespace content of the cluster.")