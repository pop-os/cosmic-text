searchState.loadedDescShard("harfrust", 0, "A complete harfbuzz shaping algorithm port to Rust.\nIndicates that special handling of the beginning of text …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nAll currently defined flags\nAll currently defined flags.\nIndicates that a dotted circle should not be inserted in …\nDefines the direction in which text is to be read.\nIndicates that special handling of the end of text …\nA feature tag with an accompanying range specifying on …\nReference to an in-memory font.\nSerialize glyph extents.\nSerialize glyph flags.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA language tag.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nType alias for a normalized variation coordinate.\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nIndicates that the <code>SAFE_TO_INSERT_TATWEEL</code> glyph-flag …\nIndicates that the <code>UNSAFE_TO_CONCAT</code> glyph-flag should be …\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nA key used for selecting a shape plan.\nA configured shaper.\nBuilder type for constructing a <code>Shaper</code>.\nData required for shaping with a single font.\nAn instance of a variable font.\nAn OpenType tag.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nIndicates that the shape() call and its variants should …\nA font variation.\nAppends a character to a buffer with the given cluster …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the language as a string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuilds the shaper with the current configuration.\nClear the contents of the buffer.\nClears the content of the glyph buffer and returns an empty\nAn index to the start of the grapheme cluster in the …\nRetrieve the cluster level of the buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns the underlying set of normalized coordinates.\nReturns the currently active normalized coordinates.\nReturns the underlying font data.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>Buffer</code>’s text direction.\nThe direction of the text.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSets the features to use for this shape plan key.\nGet the flags for this buffer.\nReturns an iterator over all of the available fonts in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a tag from raw big-endian bytes.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new shaper instance for the given font from the …\nCreates a new reference to an in-memory font at the …\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new shaper instance for the given font using the …\nParses a <code>Feature</code> form a string.\nConstruct a new <code>Tag</code> from a big-endian <code>u32</code>, without …\nCreates a new shaper instance for the given font from the …\nA selected glyph.\nGet the glyph infos.\nGet the glyph positions.\nGuess the segment properties (direction, language, script) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSets an optional instance for the shaper.\nSets the instance to use for this shape plan key.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the raw byte array representing this tag.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the buffer language.\nThe language of the text.\nSets the language to use for this shape plan key.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nReturns true if this key is a match for the given shape …\nCreate a new <code>UnicodeBuffer</code>.\nCreates new cached shaper data for the given font.\nConstruct a <code>Tag</code> from raw bytes.\nReturns a plan that can be used for shaping any buffer …\nCreates a new shape plan key with the given script and …\nCreate a new <code>Feature</code> struct.\nCreates a new reference to an in-memory font backed by the …\nAttempt to create a <code>Tag</code> from raw bytes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSets the point size for the shaper.\nPushes a string to a buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nEnsures that the buffer can hold at least <code>size</code> codepoints.\nResets clusters.\nIn scripts that use elongation (Arabic, Mongolian, Syriac, …\nPredefined scripts.\nGet the ISO15924 script tag.\nThe script of the text.\nConverts the glyph buffer content into a string.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the cluster level of the buffer.\nResets the instance for the given font and normalized …\nSet the text direction of the <code>Buffer</code>’s contents.\nSet the flags for this buffer.\nSet the buffer language.\nResets the instance for the given font using the variation …\nSet the glyph value to replace not-found …\nSets the post-context for this buffer.\nSets the pre-context for this buffer.\nSet the script from an ISO15924 tag.\nResets the instance for the given font and variation …\nShapes the buffer content using provided font and features.\nShapes the buffer content using the provided font and plan.\nReturns a builder for constructing a new shaper with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the data for the table with the specified tag, if …\nReturns the associated table directory.\nReturns script’s tag.\nReturn the memory representation of this tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf the font is in a TrueType collection (ttc) file, …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns font’s units per EM.\nIndicates that if input text is broken at the beginning of …\nIndicates that if input text is changed on one side of the …\nCheck that the tag conforms with the spec.\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …")