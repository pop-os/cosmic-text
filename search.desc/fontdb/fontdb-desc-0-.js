searchState.loadedDescShard("fontdb", 0, "<code>fontdb</code> is a simple, in-memory font database with CSS-like …\nBlack weight (900), the thickest value.\nBold weight (700).\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nExtra-bold weight (800).\nExtra light weight (200).\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nLight weight (300).\nA <code>Name</code> language.\nMedium weight (500, higher than normal).\nThe sole criterion of a monospace font is that all glyphs …\nNormal (400).\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nSemibold weight (600).\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nThin weight (100), the thinnest value.\nSpecifies the weight of glyphs in the font, their degree …\nCreates a dummy ID.\nSelects a <code>FaceInfo</code> by <code>id</code>.\nReturns font face storage and the face index by <code>ID</code>.\nReturns an iterator over the internal storage.\nA list of family names.\nA prioritized list of font family names or generic family …\nReturns the generic family name or the <code>Family::Name</code> itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn unique ID.\nA face index in the <code>source</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Database</code> contains no font faces.\nReturns the number of font faces in the <code>Database</code>.\nLoads a font data into the <code>Database</code>.\nLoads a font file into the <code>Database</code>.\nLoads a font from the given source into the <code>Database</code> and …\nLoads font files from the selected directory into the …\nAttempts to load system fonts.\nTransfers ownership of shared font data back to the font …\nMakes the font data that backs the specified face id …\nIndicates that the font face is monospaced.\nCreate a new, empty <code>Database</code>.\nA PostScript name.\nReturns the primary language.\nPushes a user-provided <code>FaceInfo</code> to the database.\nPerforms a CSS-like query and returns the best matched …\nReturns a language region.\nRemoves a font face by <code>id</code> from the database.\nSets the family that will be used by <code>Family::Cursive</code>.\nSets the family that will be used by <code>Family::Fantasy</code>.\nSets the family that will be used by <code>Family::Monospace</code>.\nSets the family that will be used by <code>Family::SansSerif</code>.\nSets the family that will be used by <code>Family::Serif</code>.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nReturns a numeric representation of a width.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nExecutes a closure with a font’s data.")