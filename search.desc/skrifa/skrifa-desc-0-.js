searchState.loadedDescShard("skrifa", 0, "A robust, ergonomic, high performance crate for OpenType …\nAxis of variation in a variable font.\nCollection of axes in a variable font.\nGlyph names are sourced from the <code>CFF</code> table.\nReference to an in-memory font.\nA 32-bit glyph identifier.\nA 16-bit glyph identifier.\nThe name of a glyph.\nSpecifies the chosen source for glyph names.\nMapping from glyph identifiers to names.\nInterface for types that can provide font metadata.\nThe identifier reserved for unknown glyphs\nThe identifier reserved for unknown glyphs.\nNamed instance of a variation.\nCollection of named instances in a variable font.\nA scalable glyph outline.\nCollection of scalable glyph outlines.\nGlyph names are sourced from the <code>post</code> table.\nGlyph names are synthesized in the format <code>gidDDD</code> where <code>DDD</code> …\nAn OpenType tag.\nReturns the underlying name as a string.\nPrimary attributes typically used for font classification …\nReturns the primary attributes for font classification– …\nReturns the primary attributes for font classification– …\nReturns the collection of variation axes.\nReturns the collection of variation axes.\nBitmap strikes and glyphs.\nReturns a collection of bitmap strikes.\nReturns a collection of bitmap strikes.\nMapping of characters (codepoints, not graphemes) to …\nReturns the character to nominal glyph identifier mapping.\nReturns the character to nominal glyph identifier mapping.\nDrawing color glyphs.\nReturns the underlying font data.\nReturns the default value of the axis.\nGiven an iterator of variation settings in user space, …\nBasic representation of an in-memory font resource.\nReturns an iterator over all of the available fonts in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a tag from raw big-endian bytes.\nCreates a new reference to an in-memory font at the …\nConstruct a new <code>Tag</code> from a big-endian <code>u32</code>, without …\nReturns the name for the given glyph identifier.\nReturns the axis at the given index.\nReturns the instance at the given index.\nReturns the axis with the given tag.\nReturns the glyph specific metrics for the specified size …\nReturns the glyph specific metrics for the specified size …\nReturns the mapping from glyph identifiers to names.\nReturns the mapping from glyph identifiers to names.\nReturns the index of the axis in its owning collection.\nHelpers for selecting a font size and location in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the raw byte array representing this tag.\nReturns true if the collection is empty.\nReturns true if the collection is empty.\nReturns true if the axis should be hidden in user …\nReturns true if the glyph name was synthesized, i.e. not …\nReturns an iterator yielding the identifier and name for …\nReturns an iterator over the axes in the collection.\nReturns an iterator over the instances in the collection.\nReturns the number of variation axes in the font.\nReturns the number of instances in the collection.\nReturns an iterator over the collection of localized …\nReturns an iterator over the collection of localized …\nGiven an iterator of variation settings in user space, …\nComputes a location in normalized variation space for this …\nGiven an iterator of variation settings in user space, …\nComputes a location in normalized variation space for this …\nReturns the maximum value of the axis.\nGlobal font and glyph specific metrics.\nReturns the global font metrics for the specified size and …\nReturns the global font metrics for the specified size and …\nReturns the minimum value of the axis.\nReturns the localized string identifier for the name of …\nReturns the collection of named variation instances.\nReturns the collection of named variation instances.\nConstruct a new <code>GlyphId16</code>.\nConstruct a new <code>GlyphId</code>.\nConstruct a <code>Tag</code> from raw bytes.\nCreates a new object for accessing glyph names from the …\nCreates a new axis collection from the given font.\nCreates a new instance collection from the given font.\nCreates a new reference to an in-memory font backed by the …\nAttempt to create a <code>Tag</code> from raw bytes.\nReturns a normalized coordinate for the given user …\nReturns the number of glyphs in the font.\nLoading, scaling and hinting of glyph outlines.\nReturns the collection of scalable glyph outlines.\nReturns the collection of scalable glyph outlines.\nReturns the string identifier for the PostScript name of …\nUseful collection of common types suitable for glob …\nExpose our “raw” underlying parser crate.\nDefinitions for specifying variations and typographic …\nReturns the chosen source for glyph names.\nLocalized strings describing font names and other metadata.\nReturns the string identifier for the subfamily name of …\nReturns the data for the table with the specified tag, if …\nReturns the associated table directory.\nReturns the tag that identifies the axis.\nReturn the memory representation of this tag.\nThe identifier as a u16.\nThe identifier as a u32.\nThe identifier as a u32.\nIf the font is in a TrueType collection (ttc) file, …\nReturns an iterator over the ordered sequence of user …\nCheck that the tag conforms with the spec.\nStretch, style and weight attributes of a font.\nWeight value of 900.\nWeight value of 700.\nWidth that is 75% of normal.\nWidth that is 125% of normal.\nWeight value of 950.\nWeight value of 800.\nWidth that is 62.5% of normal.\nWidth that is 150% of normal.\nWeight value of 200.\nGenerally a slanted style, originally based on …\nWeight value of 300.\nWeight value of 500.\nWidth that is 100% of normal.\nWeight value of 400.\nAn upright or “roman” style.\nOblique (or slanted) style with an optional angle in …\nWeight value of 600.\nWidth that is 87.5% of normal.\nWidth that is 112.5% of normal.\nWeight value of 350.\nVisual width of a font– a relative change from the …\nVisual style or ‘slope’ of a font.\nWeight value of 100.\nWidth that is 50% of normal.\nWidth that is 200% of normal.\nVisual weight class of a font, typically on a scale from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the stretch, style and weight attributes for the …\nCreates a new stretch attribute with the given ratio.\nCreates a new weight attribute with the given value.\nReturns the stretch attribute as a percentage value.\nReturns the stretch attribute as a ratio.\nReturns the underlying weight value.\nUncompressed 32-bit color bitmap data, pre-multiplied in …\nData content of a bitmap.\nThe format (or table) containing the data backing a set of …\nAn embedded bitmap glyph.\nSet of embedded bitmap glyphs of a specific size.\nSet of strikes, each containing embedded bitmaps of a …\nThe origin is in the bottom-left.\nData representing a single channel alpha mask.\nA single channel alpha mask.\nThe origin point for drawing a bitmap glyph.\nCompressed PNG bitmap data.\nThe origin is in the top-left.\nThe horizontal advance width of the bitmap glyph in …\nOuter glyph bearings in the x direction, given in font …\nOuter glyph bearings in the y direction, given in font …\nNumber of bits-per-pixel. Always 1, 2, 4 or 8.\nThe underlying data of the bitmap glyph.\nRaw bitmap data.\nReturns the format representing the underlying table for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the strike at the given index.\nReturns a bitmap glyph for the given identifier, if …\nReturns the best matching glyph for the given size and …\nThe number of rows in the bitmap.\nInner glyph bearings in the x direction, given in pixels. …\nInner glyph bearings in the y direction, given in pixels. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no available strikes.\nTrue if each row of the data is bit-aligned. Otherwise, …\nReturns an iterator over all available strikes.\nReturns the number of available strikes.\nCreates a new <code>BitmapStrikes</code> for the given font.\nThe placement origin of the bitmap.\nReturns the pixels-per-em (size) of this strike.\nThe assumed pixels-per-em in the x direction.\nThe assumed pixels-per-em in the y direction.\nThe number of columns in the bitmap.\nCreates a new <code>BitmapStrikes</code> for the given font and format.\nMapping of characters to nominal glyph identifiers.\nResult of mapping a codepoint with a variation selector.\nCacheable indices of selected mapping tables for …\nIterator over all mappings of character to nominal glyph …\nThe variation selector should be ignored and the default …\nThe variant glyph mapped by a codepoint and associated …\nIterator over all mappings of character and variation …\nCreates a new character map for the given font using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if a suitable Unicode character mapping is …\nReturns true if a Unicode variation sequence mapping is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if a symbol mapping was selected.\nMaps a character to a nominal glyph identifier.\nMaps a character and variation selector to a nominal glyph …\nReturns an iterator over all mappings of codepoint to …\nCreates a new character map from the given font.\nFinds the indices of the most suitable Unicode mapping …\nReturns an iterator over all mappings of character and …\nA fill type of a COLRv1 glyph (solid fill or various …\nA representation of a color glyph that can be painted …\nCollection of color glyphs.\nDistinguishes available color glyph formats.\nA group of required painting callbacks to be provided by …\nA color stop of a gradient.\nCompositeMode enumeration\nExtend enumeration\nA linear gradient, normalized from the P0, P1 and P2 …\nThe specified COLRv1 glyph has been successfully painted …\nSignals success of request to draw a COLRv1 sub glyph from …\nAn error during drawing a COLR glyph.\nA radial gradient, with color stops normalized to the …\nA solid fill with the color specified by <code>palette_index</code>. …\nA sweep gradient, also called conical gradient. The color …\nA transformation matrix to be applied to the drawing …\nThe client does not implement drawing COLRv1 glyphs from …\nAdditional alpha value, to be multiplied with the color …\nReturns the bounding box.\nFill the current clip area with the specified gradient …\nCombined clip and fill operation.\nReturns the version of the color table from which this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a color glyph representation for the given glyph …\nReturns the color glyph representation for the given glyph …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new collection of paintable color glyphs for the …\nCreate from a raw scalar.\nCreate from a raw scalar.\nEvaluates the paint graph at the specified location in …\nOptionally implement this method: Draw an unscaled COLRv1 …\nSpecifies a color from the <code>CPAL</code> table.\nRestore the clip state to the state before a previous …\nMerge the pushed layer down using <code>composite_mode</code> passed to …\nAlternative version of <code>push_layer</code> where the <code>composite_mode</code> …\nRestore the transformation matrix to the state before the …\nApply a clip rectangle specified by <code>clip_rect</code>.\nApply a clip path in the shape of glyph specified by …\nOpen a new layer, and merge the layer down using …\nPush the specified transform by concatenating it to the …\nReference to an in-memory font.\nOrdered sequence of normalized variation coordinates.\nReference to an ordered sequence of normalized variation …\nType for a normalized variation coordinate.\nFont size in pixels per em units.\nReturns the underlying array of normalized coordinates.\nReturns the underlying slice of normalized coordinates.\nReturns a mutable reference to the underlying slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this represents the default location in …\nComputes a linear scale factor for this font size and the …\nCreates a new font size from the given value in pixels per …\nCreates a new sequence of normalized coordinates from the …\nCreates a new location with the given number of normalized …\nReturns the raw size in pixels per em units.\nCreates a new font size for generating unscaled metrics or …\nType for a bounding box with single precision floating …\nMetrics for a text decoration.\nGlyph specific metrics.\nMetrics that apply to all glyphs in a font.\nReturns the advance width for the specified glyph.\nDistance from the baseline to the top of the alignment box.\nAverage width of all non-zero width characters in the font.\nReturns the bounding box for the specified glyph.\nUnion of minimum and maximum extents for all glyphs in the …\nDistance from the baseline to the top of a typical English …\nDistance from the baseline to the bottom of the alignment …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of available glyphs in the font.\nNumber of glyphs in the font.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the font is not proportionally spaced.\nItalic angle in counter-clockwise degrees from the …\nRecommended additional spacing between lines.\nReturns the left side bearing for the specified glyph.\nMaximum advance width of all characters in the font.\nCreates new metrics for the given font, size, and location …\nCreates new glyph metrics from the given font, size, and …\nOffset to the top of the decoration from the baseline.\nMetrics for a strikeout decoration.\nThickness of the decoration.\nMetrics for an underline decoration.\nNumber of font design units per em unit.\nDistance from the baseline to the top of the lowercase “x…\nMaximum extent in the x direction– the right side of a …\nMinimum extent in the x direction– the left side of a …\nMaximum extend in the y direction. In a Y-up coordinate …\nMinimum extent in the y direction. In a Y-up coordinate …\nInformation and adjusted metrics generated while drawing …\nThe automatic hinter that performs just-in-time adjustment …\nSelects the engine based on the same rules that FreeType …\nPostScript outlines sourced from the <code>CFF</code> table.\nPostScript outlines sourced from the <code>CFF2</code> table.\nErrors that may occur when drawing glyphs.\nOptions that define how a glyph is drawn to a pen.\nApplication of hints that are embedded in the font.\nSpecifies the backend to use when applying hints.\nTrueType outlines sourced from the <code>glyf</code> table.\nThe requested glyph was not present in the font.\nSet of derived glyph styles that are used for automatic …\nHarfBuzz style drawing with hints is not supported\nSpecifies the hinting strategy for memory size …\nError occurred during hinting.\nHinting instance that uses information embedded in the …\nConfiguration settings for a hinting instance.\nExceeded memory limits when loading a glyph.\nThe TrueType or PostScript interpreter.\nAn anchor point had invalid indices.\nHinting that is optimized for subpixel rendering with …\nHinting with a lighter touch, typically meaning less …\nStrong hinting style that should only be used for aliased, …\nNo viable sources were available.\nHinting is disabled.\nThe standard smooth hinting mode.\nA scalable glyph outline.\nCollection of scalable glyph outlines.\nSource format for an outline glyph.\nInterface for accepting a sequence of path commands.\nError occurred while loading a PostScript (CFF/CFF2) glyph.\nError occurred when reading font data.\nExceeded a recursion limit when loading a glyph.\nHinting style that is suitable for anti-aliased …\nMode selector for a smooth hinting target.\nDefines the target settings for hinting.\nConversion from outline to path failed.\nGlyph outline contains too many points.\nHinting that is optimized for subpixel rendering with …\nIf present, an adjusted advance width value generated by …\nEmit a command to close the current subpath.\nEmit a cubic bezier segment from the current point with …\nDraws the outline glyph with the given settings and emits …\nReturns the size (in bytes) of the temporary memory …\nSpecifies the hinting engine to use.\nError types associated with outlines.\nReturns the underlying source format for this outline.\nReturns the underlying format of the source outline tables.\nReturns true when the font supports hinting at fractional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the outline for the given glyph identifier.\nReturns the glyph identifier for this outline.\nReturns a value indicating whether the outline has hinting …\nReturns a value indicating if the outline may contain …\nTrue if the underlying glyph contains flags indicating the …\nCreates settings for a hinted draw operation using hinting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if hinting should actually be applied for …\nReturns an iterator over all of the outline glyphs in the …\nEmit a line segment from the current point to (x, y).\nReturns the currently configured normalized location in …\nIf present, an adjusted left side bearing value generated …\nEmit a command to begin a new subpath at (x, y).\nPrecomputes the full set of glyph styles for the given …\nCreates a new embedded hinting instance for the given …\nCreates a new outline collection for the given font.\nTypes for collecting the output when drawing a glyph …\nReturns true if the interpreter engine should be used for …\nEmit a quadratic bezier segment from the current point …\nResets the hinter state for a new font instance with the …\nReturns true when the interpreter engine <em>must</em> be used for …\nReturns the currently configured size.\nReturns the currently configured hinting target.\nDefines the properties of the intended target of a hinted …\nCreates settings for an unhinted draw operation with the …\nCreates a new outline collection for the given font and …\nBuilder method to associate a user memory buffer to be …\nBuilder method to control nuances of <code>glyf</code> pointstream …\nThe basic mode for smooth hinting.\nIf true, prevents adjustment of the outline in the …\nIf true, TrueType bytecode may assume that the resulting …\nErrors that are specific to PostScript processing.\nContour end point at this index was less than its …\nErrors that may occur when drawing glyphs.\nExpected a cubic off-curve point at this index.\nExpected a quadratic off-curve point at this index.\nExpected a quadratic off-curve or on-curve point at this …\nThe requested glyph was not present in the font.\nHarfBuzz style drawing with hints is not supported\nHinting error with additional context.\nError occurred during hinting.\nExceeded memory limits when loading a glyph.\nAn anchor point had invalid indices.\nNo viable sources were available.\nExpected number of points to == number of flags\nError occurred while loading a PostScript (CFF/CFF2) glyph.\nError occurred when reading font data.\nAn error that occurs when reading font data\nExceeded a recursion limit when loading a glyph.\nConversion from outline to path failed.\nErrors that can occur when converting an outline to a path.\nGlyph outline contains too many points.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClose the current subpath.\nPen that generates the control bounds of a glyph outline.\nDraw a cubic bezier from the current point with control …\nIf the first point is off-curve, check if the last is …\nIf the first point is off-curve, check if the second is …\nDraw a line from the current point to (x, y).\nBegin a new subpath at (x, y).\nPen that drops all drawing output into the ether.\nInterface for accepting a sequence of path commands.\nSingle element of a path.\nStyle for path conversion.\nDraw a quadratic bezier from the current point with a …\nPen that generates SVG style path data.\nReturns the bounding box collected by this pen.\nClears the content of the internal string.\nEmit a command to close the current subpath.\nEmit a cubic bezier segment from the current point with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmit a line segment from the current point to (x, y).\nEmit a command to begin a new subpath at (x, y).\nCreates a new SVG pen that formats floating point values …\nCreates a new bounds pen.\nEmit a quadratic bezier segment from the current point …\nCreates a new SVG pen with the given precision (the number …\nSetting defined by a selector tag and an associated value.\nType for specifying a variation axis setting in user …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new setting from the given selector tag and its …\nTag that specifies the target setting.\nTag that specifies the target setting.\nThe desired value for the setting.\nThe desired value for the setting.\nCompatible full (Macintosh only).\nCopyright notice.\nIterator over the characters of a string.\nDark background palette.\nDescription of the typeface.\nName of the designer of the typeface.\nURL of typeface designer (with protocol, e.g., http://, …\nFont family name.\nFull font name that reflects all family and relevant …\nThe last value that is available for font-specific names.\nThe last value that is explicitly reserved for standard …\nLicense description.\nURL where additional licensing information can be found.\nLight background palette.\nString containing a name or other font metadata in a …\nIterator over a collection of localized strings for a …\nManufacturer name.\nPostScript CID findfont name.\nPostScript name for the font.\nSample text.\nFont subfamily name.\nIdentifier for an informational string (or name).\nTrademark; this is used to save any trademark …\nTypographic family name.\nTypographic subfamily name.\nUnique font identifier.\nVariations PostScript name prefix.\nURL of font vendor (with protocol, e.g., http://, ftp://).\nVersion string.\nWWS family name.\nWWS subfamily name.\nReturns an iterator over the characters of the localized …\nReturns a new <code>NameId</code> by adding <code>rhs</code> to the current value.\nReturns the best available English string or the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the informational string identifier for this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is in the range <code>0..=255</code> (reserved for …\nReturns the BCP-47 language identifier for the localized …\nCreate a new identifier from a raw u16 value.\nCreates a new localized string iterator from the given …\nReturns an iterator over the set of predefined identifiers …\nReturn the memory representation of this identifier as a …\nReturn the identifier as a u16.")