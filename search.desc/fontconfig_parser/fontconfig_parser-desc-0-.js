searchState.loadedDescShard("fontconfig_parser", 0, "This crate provide parsing fontconfig file but not yet …\nAlias elements provide a shorthand notation for the set of …\nWhether glyphs can be antialiased\nWhether glyphs can be antialiased\nStretches glyphs horizontally before hinting\nStretches glyphs horizontally before hinting\nUse autohinter instead of normal hinter\nUse autohinter instead of normal hinter\n<code>&lt;bool&gt;false&lt;/bool&gt;</code>\nList of layout capabilities in the font\nList of layout capabilities in the font\nThis element holds at least one <code>Value::Int</code> element of an …\nUnicode chars encoded by the font\nUnicode chars encoded by the font\nWhether any glyphs have color\nWhether any glyphs have color\n<code>&lt;const&gt;hintslight&lt;/const&gt;</code>\nWhether the style is a decorative variant\nWhether the style is a decorative variant\nFinal dir data\n<code>&lt;double&gt;1.5&lt;/double&gt;</code>\nTarget dots per inch\nTarget dots per inch\nUse the embedded bitmap instead of the outline\nUse the embedded bitmap instead of the outline\nRasterizer should synthetically embolden the font\nRasterizer should synthetically embolden the font\nContains the error value\nFont family names\nFont family names\nLanguages corresponding to each family\nLanguages corresponding to each family\nThe filename holding the font\nThe filename holding the font\nList of the feature tags in OpenType to be enabled\nList of the feature tags in OpenType to be enabled\nString name of the font format\nString name of the font format\nWhether the font has hinting\nWhether the font has hinting\nVersion number of the font\nVersion number of the font\nFont foundry name\nFont foundry name\nFont full names (often includes style)\nFont full names (often includes style)\nLanguages corresponding to each fullname\nLanguages corresponding to each fullname\nUse font global advance data (deprecated)\nUse font global advance data (deprecated)\nAutomatic hinting style\nAutomatic hinting style\nWhether the rasterizer should use hinting\nWhether the rasterizer should use hinting\nThe index of the font within the file\nThe index of the font within the file\n<code>&lt;int&gt;0&lt;/int&gt;</code>\nList of RFC-3066-style languages this font supports\nList of RFC-3066-style languages this font supports\nThis element holds at least one <code>Value::String</code> element of a …\nType of LCD filter\nType of LCD filter\nEliminate leading from line spacing\nEliminate leading from line spacing\nLanguage name to be used for the default value of …\nLanguage name to be used for the default value of …\nContains the success value\nOrder number of the font\nOrder number of the font\nWhether the glyphs are outlines\nWhether the glyphs are outlines\nPixel size\nPixel size\nFont family name in PostScript\nFont family name in PostScript\nString  Name of the running program\nString  Name of the running program\n<code>&lt;name target=&quot;font&quot;&gt;pixelsize&lt;/name&gt;</code>\nThis element holds the two <code>Value::Int</code> elements of a range …\nWhich rasterizer is in use (deprecated)\nWhich rasterizer is in use (deprecated)\nThis element contains a directory name where will be …\nFinal remap-dirs data\nunknown, rgb, bgr, vrgb, vbgr, none - subpixel geometry\nunknown, rgb, bgr, vrgb, vbgr, none - subpixel geometry\nWhether glyphs can be scaled\nWhether glyphs can be scaled\nScale factor for point-&gt;pixel conversions (deprecated)\nScale factor for point-&gt;pixel conversions (deprecated)\nPoint size\nPoint size\nItalic, oblique or roman\nItalic, oblique or roman\nProportional, dual-width, monospace or charcell\nProportional, dual-width, monospace or charcell\n<code>&lt;string&gt;str&lt;/string&gt;</code>\nFont style. Overrides weight and slant\nFont style. Overrides weight and slant\nLanguages corresponding to each style\nLanguages corresponding to each style\nThis element contains a single value which is compared …\nRuntime typed fontconfig value\nAutomatic hinting style\nAutomatic hinting style\nLight, medium, demibold, bold or black\nLight, medium, demibold, bold or black\nCondensed, normal or expanded\nCondensed, normal or expanded\nEnvironment variable name which used <code>xdg</code> prefix\nEnvironment variable name which used <code>xdg</code> prefix\nEnvironment variable name which used <code>xdg</code> prefix\nEnvironment variable name which used <code>xdg</code> prefix\nFallback path when <code>XDG_ENV</code> is not exists\nFallback path when <code>XDG_ENV</code> is not exists\nFallback path when <code>XDG_ENV</code> is not exists\nFallback path when <code>XDG_ENV</code> is not exists\n<code>&lt;accept&gt;</code>\nalias name\nCalculate actual path\nCalculate actual path\nCalculate actual path\nCalculate actual path\n<code>&lt;default&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse as raw config parts use this when you want custom …\ndir path\ndir path will be mapped as the path <code>as-path</code> in cached …\n<code>&lt;prefer&gt;</code>\n‘salt’ property affects to determine cache filename. …\n‘salt’ property affects to determine cache filename. …")