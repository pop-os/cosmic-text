searchState.loadedDescShard("roxmltree", 0, "Represent an XML document as a read-only tree.\nAn attribute.\nIterator over a node’s attributes\nIndicates that too many attributes were parsed.\nIterator over specified axis.\nA raw slice of the input string.\nIterator over children.\nA comment node.\nIterator over a node and its descendants.\nAn XML tree container.\nAn XML with DTD detected.\nAn element has a duplicated attributes.\nA namespace was already defined on this element.\nAn element node.\nA possible entity reference loop.\nA list of all possible errors.\nAn expanded name.\nAttribute value cannot have a <code>&lt;</code> character.\nAn invalid/unexpected character.\nAn invalid/unexpected character.\nA Character Data node contains an invalid data.\nA comment cannot contain <code>--</code> or end with <code>-</code>.\n<code>xmlns</code> can’t be used as an element prefix.\nAn invalid ExternalID in the DTD.\nAn invalid name.\nAn unexpected string.\nThe <code>xmlns:xml</code> attribute must have an …\nA malformed entity reference.\nThe http://www.w3.org/2000/xmlns/ URI.\nThe http://www.w3.org/XML/1998/namespace URI.\nA namespace.\nIterator over the namespaces attached to a node.\nIndicates that too many namespaces were parsed.\nThe XML document must have at least one element.\nA node in a document.\nA node ID stored as <code>u32</code>.\nA list of supported node types.\nIndicates that the <code>ParsingOptions::nodes_limit</code> was reached.\nA non-XML character has occurred.\nA reference-counted string.\nA processing instruction.\nA processing instruction.\nParsing options.\nThe root node of the <code>Document</code>.\nA string storage.\nA text node.\nPosition in text.\nThe root node was opened but never closed.\nIncorrect tree structure.\nAn XML document can have only one XML declaration and it …\nThe steam ended earlier than we expected.\nEntity value starts with a close tag.\nOnly the <code>xmlns:xml</code> attribute can have the …\nThe http://www.w3.org/2000/xmlns/ URI must not be declared.\nA reference to an entity that was not defined in the DTD.\nAn unknown namespace.\nAn unknown token.\nAllow DTD parsing.\nReturns an iterator over ancestor nodes starting at this …\nReturns a string slice.\nReturns element’s attribute value.\nReturns element’s attribute object.\nReturns element’s attributes.\nReturns an iterator over children nodes.\nReturns node’s default namespace URI.\nReturns an iterator over document’s descendant nodes.\nReturns an iterator over this node and its descendants.\nReturns node’s document.\nReturns the first child of this node.\nReturns an iterator over first children nodes starting at …\nReturns the first element child of this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from static data.\nReturns the <code>u32</code> representation of the <code>NodeId</code>.\nReturns the node of the tree with the given NodeId.\nReturns the <code>usize</code> representation of the <code>NodeId</code>.\nChecks that element has a specified attribute.\nReturns true if this node has children.\nReturns true if this node has siblings.\nChecks that node has a specified tag name.\nReturns node’s NodeId\nReturns the input text of the original document.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that node is a comment node.\nChecks that node is an element node.\nChecks that node is a processing instruction node.\nChecks that node is a root node.\nChecks that node is a text node.\nReturns the last child of this node.\nReturns an iterator over last children nodes starting at …\nReturns the last element child of this node.\nReturns an URI for a given prefix.\nReturns a prefix for a given namespace URI.\nReturns attribute’s name.\nReturns namespace name/prefix.\nReturns a local name.\nReturns attribute’s namespace URI.\nReturns a namespace URI.\nReturns element’s namespaces.\nConstructs a new <code>TextPos</code>.\nConstruct a new <code>NodeId</code> from a <code>u32</code>.\nCreates a new owned string from <code>&amp;str</code> or <code>String</code>.\nReturns the next sibling of this node.\nReturns the next sibling element of this node.\nReturns an iterator over next sibling nodes starting at …\nReturns node’s type.\nSets the maximum number of nodes to parse.\nReturns the parent of this node.\nReturns the parent element of this node.\nParses the input XML string.\nParses the input XML string using to selected options.\nReturns node as Processing Instruction.\nReturns the error position.\nReturns attribute’s position in bytes in the original …\nReturns the previous sibling of this node.\nReturns the previous sibling element of this node.\nReturns an iterator over previous sibling nodes starting …\nReturns attribute’s range in bytes in the original …\nReturns node’s range in bytes in the original document.\nReturns attribute’s qname’s range in bytes in the …\nReturns attribute’s value’s range in bytes in the …\nReturns the root node.\nReturns the root element of the document.\nReturns node’s tag name.\nReturns element’s tail text.\nReturns element’s tail text storage.\nReturns node’s text.\nCalculates <code>TextPos</code> in the original document from position …\nReturns node’s text storage.\nReturns namespace URI.\nReturns attribute’s value.\nReturns attribute’s value storage.")