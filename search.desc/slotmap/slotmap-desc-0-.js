searchState.loadedDescShard("slotmap", 0, "slotmap\nThe default slot map key type.\nDense slot map, storage with stable unique keys.\nHop slot map, storage with stable unique keys.\nKey used to access stored values in a slot map.\nThe actual data stored in a <code>Key</code>.\nSecondary map, associate data with previously stored …\nSlot map, storage with stable unique keys.\nReturns the key data as a 64-bit integer. No guarantees …\nContains the slot map implementation.\nGets the <code>KeyData</code> stored in this key.\nContains the dense slot map implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIff <code>value</code> is a value received from <code>k.as_ffi()</code>, returns a …\nContains the faster iteration, slower insertion/removal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a key is null. There is only a single null key, …\nA helper macro to create new key types. If you use a new …\nCreates a new key that is always invalid and distinct from …\nContains the secondary map implementation.\nA draining iterator for <code>SlotMap</code>.\nAn iterator that moves key-value pairs out of a <code>SlotMap</code>.\nAn iterator over the key-value pairs in a <code>SlotMap</code>.\nA mutable iterator over the key-value pairs in a <code>SlotMap</code>.\nAn iterator over the keys in a <code>SlotMap</code>.\nSlot map, storage with stable unique keys.\nAn iterator over the values in a <code>SlotMap</code>.\nA mutable iterator over the values in a <code>SlotMap</code>.\nReturns the number of elements the <code>SlotMap</code> can hold without\nClears the slot map. Keeps the allocated memory for reuse.\nReturns <code>true</code> if the slot map contains <code>key</code>.\nClears the slot map, returning all key-value pairs in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns mutable references to the values corresponding to …\nReturns mutable references to the values corresponding to …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the key …\nReturns a mutable reference to the value corresponding to …\nInserts a value into the slot map. Returns a unique key …\nInserts a value given by <code>f</code> into the slot map. The key …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the slot map is empty.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the slot map.\nConstructs a new, empty <code>SlotMap</code>.\nRemoves a key from the slot map, returning the value at …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nInserts a value given by <code>f</code> into the slot map. The key …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary …\nCreates an empty <code>SlotMap</code> with the given capacity.\nCreates an empty <code>SlotMap</code> with the given capacity and a …\nConstructs a new, empty <code>SlotMap</code> with a custom key type.\nDense slot map, storage with stable unique keys.\nA draining iterator for <code>DenseSlotMap</code>.\nAn iterator that moves key-value pairs out of a …\nAn iterator over the key-value pairs in a <code>DenseSlotMap</code>.\nA mutable iterator over the key-value pairs in a …\nAn iterator over the keys in a <code>DenseSlotMap</code>.\nAn iterator over the values in a <code>DenseSlotMap</code>.\nA mutable iterator over the values in a <code>DenseSlotMap</code>.\nReturns the number of elements the <code>DenseSlotMap</code> can hold …\nClears the slot map. Keeps the allocated memory for reuse.\nReturns <code>true</code> if the slot map contains <code>key</code>.\nClears the slot map, returning all key-value pairs in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns mutable references to the values corresponding to …\nReturns mutable references to the values corresponding to …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the key …\nReturns a mutable reference to the value corresponding to …\nInserts a value into the slot map. Returns a unique key …\nInserts a value given by <code>f</code> into the slot map. The key …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the slot map is empty.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the slot map.\nConstruct a new, empty <code>DenseSlotMap</code>.\nRemoves a key from the slot map, returning the value at …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nInserts a value given by <code>f</code> into the slot map. The key …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary …\nCreates an empty <code>DenseSlotMap</code> with the given capacity.\nCreates an empty <code>DenseSlotMap</code> with the given capacity and …\nConstructs a new, empty <code>DenseSlotMap</code> with a custom key …\nA draining iterator for <code>HopSlotMap</code>.\nHop slot map, storage with stable unique keys.\nAn iterator that moves key-value pairs out of a <code>HopSlotMap</code>.\nAn iterator over the key-value pairs in a <code>HopSlotMap</code>.\nA mutable iterator over the key-value pairs in a <code>HopSlotMap</code>…\nAn iterator over the keys in a <code>HopSlotMap</code>.\nAn iterator over the values in a <code>HopSlotMap</code>.\nA mutable iterator over the values in a <code>HopSlotMap</code>.\nReturns the number of elements the <code>HopSlotMap</code> can hold …\nClears the slot map. Keeps the allocated memory for reuse.\nReturns <code>true</code> if the slot map contains <code>key</code>.\nClears the slot map, returning all key-value pairs in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns mutable references to the values corresponding to …\nReturns mutable references to the values corresponding to …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the key …\nReturns a mutable reference to the value corresponding to …\nInserts a value into the slot map. Returns a unique key …\nInserts a value given by <code>f</code> into the slot map. The key …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the slot map is empty.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the slot map.\nConstructs a new, empty <code>HopSlotMap</code>.\nRemoves a key from the slot map, returning the value at …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nInserts a value given by <code>f</code> into the slot map. The key …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary …\nCreates an empty <code>HopSlotMap</code> with the given capacity.\nCreates an empty <code>HopSlotMap</code> with the given capacity and a …\nConstructs a new, empty <code>HopSlotMap</code> with a custom key type.\nA draining iterator for <code>SecondaryMap</code>.\nA view into a single entry in a <code>SecondaryMap</code>, which may …\nAn iterator that moves key-value pairs out of a …\nAn iterator over the key-value pairs in a <code>SecondaryMap</code>.\nA mutable iterator over the key-value pairs in a …\nAn iterator over the keys in a <code>SecondaryMap</code>.\nAn occupied entry.\nA view into a occupied entry in a <code>SecondaryMap</code>. It is part …\nSecondary map, associate data with previously stored …\nA vacant entry.\nA view into a vacant entry in a <code>SecondaryMap</code>. It is part …\nAn iterator over the values in a <code>SecondaryMap</code>.\nA mutable iterator over the values in a <code>SecondaryMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the <code>SecondaryMap</code> can hold …\nClears the secondary map. Keeps the allocated memory for …\nReturns <code>true</code> if the secondary map contains <code>key</code>.\nClears the slot map, returning all key-value pairs in …\nGets the given key’s corresponding <code>Entry</code> in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nReturns mutable references to the values corresponding to …\nReturns mutable references to the values corresponding to …\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nReturns a reference to the value corresponding to the key …\nReturns a mutable reference to the value corresponding to …\nInserts a value into the secondary map at the given <code>key</code>. …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns if the secondary map is empty.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns this entry’s key.\nGets the key that would be used when inserting a value …\nReturns this entry’s key.\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the secondary map.\nConstructs a new, empty <code>SecondaryMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the secondary map, returning the value …\nTakes the value out of the entry, and returns it.\nRemoves the entry from the slot map and returns the key …\nRetains only the elements specified by the predicate.\nSets the capacity of the <code>SecondaryMap</code> to <code>new_capacity</code>, if …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary …\nCreates an empty <code>SecondaryMap</code> with the given capacity of …")