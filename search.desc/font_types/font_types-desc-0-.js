searchState.loadedDescShard("font_types", 0, "Common scalar data types used in font files\nA wrapper around raw big-endian bytes for some type.\nMinimum and maximum extents of a rectangular region.\nThe tag contained one or more non-space characters after a …\nThe SFNT version for fonts containing CFF outlines.\nCompatible full (Macintosh only).\nCopyright notice.\nA trait for determining whether versions are compatible.\nDark background palette.\nDescription of the typeface.\nName of the designer of the typeface.\nURL of typeface designer (with protocol, e.g., http://, …\nThis type’s smallest representable value\nThis type’s smallest representable value\nThis type’s smallest representable value\nThis type’s smallest representable value\nThis type’s smallest representable value\n32-bit signed fixed point number with 6 bits of fraction.\n16-bit signed fixed point number with 14 bits of fraction.\n16-bit signed fixed point number with 12 bits of fraction.\n16-bit signed fixed point number with 10 bits of fraction.\nFont family name.\nFull font name that reflects all family and relevant …\n16-bit signed quantity in font design units.\n32-bit signed fixed point number with 16 bits of fraction.\nA trait for types that have a known, constant size.\nA 32-bit glyph identifier.\nA 16-bit glyph identifier.\n24-bit unsigned integer.\nThe tag contained an invalid byte, not within the printable\nThe tag was not between 1 and 4 bytes in length.\nAn error representing an invalid tag.\nThe last value that is available for font-specific names.\nThe last value that is explicitly reserved for standard …\nLicense description.\nURL where additional licensing information can be found.\nLight background palette.\nA simple datetime type.\nManufacturer name.\nMaximum value.\nMaximum value.\nMaximum value.\nMaximum value.\nMaximum value.\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nMinimum value.\nMinimum value.\nMinimum value.\nMinimum value.\nMinimum value.\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nA type representing a major, minor version pair.\nThe identifier reserved for unknown glyphs\nThe identifier reserved for unknown glyphs.\nIdentifier for an informational string (or name).\nAn offset of a given width for which NULL (zero) is a …\nRepresentation of 1.0.\nRepresentation of 1.0.\nRepresentation of 1.0.\nRepresentation of 1.0.\nRepresentation of 1.0.\nA16-bit offset to a table.\nA24-bit offset to a table.\nA32-bit offset to a table.\nPostScript CID findfont name.\nPostScript name for the font.\nTwo dimensional point with a generic coordinate type.\nThe raw size of this type, in bytes.\nThe raw byte representation of this type.\nSample text.\nFont subfamily name.\nA trait for font scalars.\nTrademark; this is used to save any trademark …\nThe SFNT version for legacy Apple fonts containing …\nThe header tag for a font collection file.\nThe SFNT version for fonts containing TrueType outlines.\nTypographic family name.\nTypographic subfamily name.\nAn OpenType tag.\nThe error type returned when a glyph identifier conversion …\nUnique font identifier.\n16-bit unsigned quantity in font design units.\n24-bit unsigned integer.\nVariations PostScript name prefix.\nURL of font vendor (with protocol, e.g., http://, ftp://).\nVersion 0.5\nVersion 1.0\nVersion 1.0\nVersion 1.1\nVersion 1.1\nVersion 1.2\nVersion 1.3\nVersion 2.0\nVersion 2.0\nVersion 2.5\nVersion 3.0\nVersion string.\nA legacy 16/16 version encoding Packed 32-bit value with …\nWWS family name.\nWWS subfamily name.\nRepresentation of 0.0.\nRepresentation of 0.0.\nRepresentation of 0.0.\nRepresentation of 0.0.\nRepresentation of 0.0.\nReturns the absolute value of the number.\nReturns the absolute value of the number.\nReturns the absolute value of the number.\nReturns the absolute value of the number.\nReturns the absolute value of the number.\nThe number of seconds since 00:00 1904-01-01, UTC.\nGet the raw big-endian bytes.\nCreates a new point from a single value assigned to both …\nChecked addition.\nChecked addition.\nChecked addition.\nChecked addition.\nChecked addition.\nReturns a new <code>NameId</code> by adding <code>rhs</code> to the current value.\nCreate from a i32, returning <code>None</code> if the value overflows.\nCreate from a u32, returning <code>None</code> if the value overflows.\nreturn <code>true</code> if this version is field-compatible with <code>other</code>.\nReturns the largest integer less than or equal to the …\nReturns the largest integer less than or equal to the …\nReturns the largest integer less than or equal to the …\nReturns the largest integer less than or equal to the …\nReturns the largest integer less than or equal to the …\nReturns the fractional part of the number.\nReturns the fractional part of the number.\nReturns the fractional part of the number.\nReturns the fractional part of the number.\nReturns the fractional part of the number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a tag from raw big-endian bytes.\nCreates a new fixed point value from the underlying bit …\nCreates a new fixed point value from the underlying bit …\nCreates a new fixed point value from the underlying bit …\nCreates a new fixed point value from the underlying bit …\nCreates a new fixed point value from the underlying bit …\nCreates a fixed point value from af32.\nCreates a fixed point value from af32.\nCreates a fixed point value from af32.\nCreates a fixed point value from af64.\nCreates a fixed point value from af64.\nCreates a 16.16 fixed point value from a 32 bit integer.\nCreates a 26.6 fixed point value from a 32 bit integer.\nCreate an instance of this type from raw big-endian bytes\nAttempt to construct a new raw value from this slice.\nConstruct a new <code>Tag</code> from a big-endian <code>u32</code>, without …\nConvert this raw type to its native representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the raw byte array representing this tag.\nReturn <code>true</code> if this offset is null.\nReturn <code>true</code> if this offset is null.\nReturn <code>true</code> if this offset is null.\nReturns <code>true</code> if self is in the range <code>0..=255</code> (reserved for …\nThe major version number\nMaps <code>Point&lt;T&gt;</code> to <code>Point&lt;U&gt;</code> by applying a function to each …\nThe minor version number\nMultiplies <code>self</code> by <code>a</code> and divides the product by <code>b</code>.\nMultiplies <code>self</code> by <code>a</code> and divides the product by <code>b</code>.\nConstruct a new <code>GlyphId16</code>.\nConstruct a new <code>GlyphId</code>.\nCreate from a i32. Saturates on overflow.\nCreate with a number of seconds relative to 1904-01-01 …\nCreate a new identifier from a raw u16 value.\nCreate a new offset.\nCreate a new offset.\nCreate a new offset.\nCreates a new point with the given x and y coordinates.\nconstruct a new <code>BigEndian&lt;T&gt;</code> from raw bytes\nConstruct a <code>Tag</code> from raw bytes.\nCreate from a u32. Saturates on overflow.\nCreate a new version with the provided major and minor …\nCreate a new version with major and minor parts.\nAttempt to create a <code>Tag</code> from raw bytes.\nAn internal macro for implementing the <code>RawType</code> trait.\nReturn a reference to the inner offset\nReturns an iterator over the set of predefined identifiers …\nAttempt to read a scalar from a slice.\nAttempt to read a scalar from a slice.\nReturns the nearest integer value.\nReturns the nearest integer value.\nReturns the nearest integer value.\nReturns the nearest integer value.\nReturns the nearest integer value.\nSaturating addition.\nSaturating addition.\nSaturating addition.\nSaturating addition.\nSaturating addition.\nSaturating substitution.\nSaturating substitution.\nSaturating substitution.\nSaturating substitution.\nSaturating substitution.\nReturn a <code>BoundingBox</code> scaled by a scale factor of the same …\nSet the value, overwriting the bytes.\nThe representation of this number as a big-endian byte …\nThe representation of this number as a big-endian byte …\nThe representation of this number as a big-endian byte …\nThe representation of this number as a big-endian byte …\nThe representation of this number as a big-endian byte …\nThe representation of this number as a big-endian byte …\nThe representation of this number as a big-endian byte …\nThe representation of this datetime as a big-endian byte …\nReturn the memory representation of this identifier as a …\nReturn the memory representation of this tag.\nThe representation of this version as a big-endian byte …\nThe representation of this version as a big-endian byte …\nReturns the underlying bit representation of the value.\nReturns the underlying bit representation of the value.\nReturns the underlying bit representation of the value.\nReturns the underlying bit representation of the value.\nReturns the underlying bit representation of the value.\nConverts a 16.16 to 26.6 fixed point value.\nConverts a 16.16 to 2.14 fixed point value.\nReturns the value as an f32.\nReturns the value as an f32.\nReturns the value as an f32.\nConverts a 16.16 fixed point value to a single precision …\nConverts a 26.6 fixed point value to a single precision …\nReturns the value as an f64.\nReturns the value as an f64.\nConverts a 2.14 to 16.16 fixed point value.\nConverts this number to a 16.16 fixed point value.\nConverts this number to a 16.16 fixed point value.\nConverts a 16.16 fixed point value to a 32 bit integer, …\nConverts a 26.6 fixed point value to a 32 bit integer, …\nReturns this value as an unsigned 32-bit integer.\nReturn the separate major &amp; minor version numbers.\nEncode this type as raw big-endian bytes\nThe identifier as a u16.\nReturn the identifier as a u16.\nThe identifier as a u32.\nThe identifier as a u32.\nReturns this value as an unsigned 32-bit integer.\nCheck that the tag conforms with the spec.\nWrapping addition.\nWrapping addition.\nWrapping addition.\nWrapping addition.\nWrapping addition.\nWrapping substitution.\nWrapping substitution.\nWrapping substitution.\nWrapping substitution.\nWrapping substitution.\nX coordinate.\nMaximum extent in the x direction– the right side of a …\nMinimum extent in the x direction– the left side of a …\nY coordinate.\nMaximum extend in the y direction. In a Y-up coordinate …\nMinimum extent in the y direction. In a Y-up coordinate …")