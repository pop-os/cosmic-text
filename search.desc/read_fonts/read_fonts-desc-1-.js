searchState.loadedDescShard("read_fonts", 1, "Returns true if this is an on curve point.\nConstruct a new <code>CurvePoint</code>\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the total number of points.\nIf the number of contours is greater than or equal to zero,\nIf the number of contours is greater than or equal to zero,\nIf the number of contours is greater than or equal to zero,\nConvenience method to construct an off-curve point\nCreates a new off curve cubic point flag.\nCreates a new off curve quadratic point flag.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nCreates a new on curve point flag.\nConvenience method to construct an on-curve point\nTrue if this is an on-curve point.\nReturns an iterator over the points in the glyph.\nReads points and flags into the provided buffers.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nApplies the given marker to this point.\nEnables the on curve flag.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the underlying bits.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nComponent transformation matrix.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns a copy with all markers cleared.\nX coordinate.\nMaximum x for coordinate data.\nMaximum x for coordinate data.\nMaximum x for coordinate data.\nMinimum x for coordinate data.\nMinimum x for coordinate data.\nMinimum x for coordinate data.\nX scale factor.\nXY skew factor.\nY coordinate.\nMaximum y for coordinate data.\nMaximum y for coordinate data.\nMaximum y for coordinate data.\nMinimum y for coordinate data.\nMinimum y for coordinate data.\nMinimum y for coordinate data.\nYX skew factor.\nY scale factor.\nAn error returned by <code>Decoder::decode</code> if the end of the …\nDecodes instructions from TrueType bytecode.\nSequence of instruction operands that are encoded directly …\nDecoded TrueType instruction.\nOperation code for a TrueType instruction.\nThe bytecode for the program.\nDecodes the next instruction.\nReturns an iterator that yields all instructions in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an opcode from the given byte.\nInstruction operands that were decoded from the bytecode.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no operands.\nReturns true if this is an instruction that pushes values …\nReturns the number of operands.\nReturns a more descriptive name for the opcode.\nCreates a new decoder for the given bytecode and program …\nOperation code.\nThe “program counter” or current offset into the …\nProgram counter – offset into the bytecode where this …\nReturns an iterator over the operand values.\nA mask with all the device/variation index bits set\nAnchor Table Format 1: Design Units\nAnchor Table Format 2: Design Units Plus Contour Point\nAnchor Table Format 3: Design Units Plus Device or …\nAnchor Tables position one glyph with respect to another.\nPart of MarkBasePosFormat1\nPart of BaseArray\nPart of PairPosFormat2\nPart of PairPosFormat2\nreexport stuff from layout that we use\nPart of MarkLigPosFormat1\nreexport stuff from layout that we use\nCursive Attachment Positioning Format 1: Cursvie attachment\nreexport stuff from layout that we use\nreexport stuff from layout that we use\nPart of CursivePosFormat1\nExtension Positioning Subtable Format 1\nA GPOS Extension Positioning subtable\nreexport stuff from layout that we use\nreexport stuff from layout that we use\nClass Definition Table Format 1 GPOS Version 1.0\nPart of MarkLigPosFormat1\nPart of MarkLigPosFormat1\nreexport stuff from layout that we use\nPart of MarkMarkPosFormat1Class2Record\nPart of MarkMarkPosFormat1\nMark Array Table\nMark-to-Base Attachment Positioning Format 1: Mark-to-base …\nMark-to-Ligature Positioning Format 1: Mark-to-Ligature …\nMark-to-Mark Attachment Positioning Format 1: Mark-to-Mark …\nPart of MarkArray\nLookup Type 1: Single Adjustment Positioning Subtable\nPair Adjustment Positioning Format 1: Adjustments for …\nPair Adjustment Positioning Format 2: Class Pair Adjustment\nPart of PairPosFormat1\nPart of PairSet\nA GPOS ChainedSequenceContext\nA GPOS Lookup subtable.\nA typed GPOS LookupList table\nA GPOS SequenceContext\nThe subtables from a GPOS lookup.\nreexport stuff from layout that we use\nLookup Type 1: Single Adjustment Positioning Subtable\nSingle Adjustment Positioning Format 1: Single Positioning …\nSingle Adjustment Positioning Format 2: Array of …\nA fully resolved <code>ValueRecord</code>.\nA context for resolving <code>Value</code>s and <code>ValueRecord</code>s.\nSee ValueRecord\nA Positioning ValueRecord.\nIncludes horizontal adjustment for advance\nIncludes Device table (non-variable font) / VariationIndex …\nIncludes horizontal adjustment for placement\nIncludes Device table (non-variable font) / VariationIndex …\nIncludes vertical adjustment for advance\nIncludes Device table (non-variable font) / VariationIndex …\nIncludes vertical adjustment for placement\nIncludes Device table (non-variable font) / VariationIndex …\nReturns the set containing all flags.\nFormat identifier, = 1\nFormat identifier, = 2\nFormat identifier, = 3\nFormat identifier, = 1\nIndex to glyph contour point\nArray of offsets (one per mark class) to Anchor tables. …\nArray of offsets (one per mark class) to Anchor tables. …\nArray of offsets (one per mark class) to Anchor tables. …\nAttempt to resolve <code>base_array_offset</code>.\nOffset to BaseArray table, from beginning of MarkBasePos …\nNumber of BaseRecords\nAttempt to resolve <code>base_coverage_offset</code>.\nOffset to baseCoverage table, from beginning of MarkBasePos\nArray of BaseRecords, in order of baseCoverage Index.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nNumber of classes in classDef1 table — includes Class 0.\nArray of Class1 records, ordered by classes in classDef1.\nNumber of classes in classDef2 table — includes Class 0.\nArray of Class2 records, ordered by classes in classDef2.\nArray of Class2 records, ordered by classes in classDef2.\nAttempt to resolve <code>class_def1_offset</code>.\nOffset to ClassDef table, from beginning of PairPos …\nAttempt to resolve <code>class_def2_offset</code>.\nOffset to ClassDef table, from beginning of PairPos …\nUpdate the set of lookup indices with all lookups …\nReturn a set of all feature indices underneath the …\nReturn a set of lookups referenced by the specified …\nNumber of ComponentRecords in this ligature\nArray of Component records, ordered in writing direction.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nOffset to Coverage table, from beginning of SinglePos …\nOffset to Coverage table, from beginning of SinglePos …\nOffset to Coverage table, from beginning of PairPos …\nOffset to Coverage table, from beginning of PairPos …\nOffset to Coverage table, from beginning of CursivePos …\nOffset to Coverage table, from beginning of SinglePos …\nOffset to Coverage table, from beginning of PairPos …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nOffset to entryAnchor table, from beginning of CursivePos …\nOffset to entryAnchor table, from beginning of CursivePos …\nOffset to entryAnchor table, from beginning of CursivePos …\nNumber of EntryExit records\nArray of EntryExit records, in Coverage index order.\nOffset to exitAnchor table, from beginning of CursivePos …\nOffset to exitAnchor table, from beginning of CursivePos …\nOffset to exitAnchor table, from beginning of CursivePos …\nAttempt to resolve <code>extension_offset</code>.\nLookup type of subtable referenced by extensionOffset …\nOffset to the extension subtable, of lookup type …\nAttempt to resolve <code>feature_list_offset</code>.\nOffset to FeatureList table, from beginning of GPOS table\nAttempt to resolve <code>feature_variations_offset</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nAttempt to resolve <code>ligature_array_offset</code>.\nOffset to LigatureArray table, from beginning of MarkLigPos\nArray of offsets to LigatureAttach tables. Offsets are from\nA dynamically resolving wrapper for <code>ligature_attach_offsets</code>…\nNumber of LigatureAttach table offsets\nAttempt to resolve <code>ligature_coverage_offset</code>.\nOffset to ligatureCoverage table, from beginning of …\nAttempt to resolve <code>lookup_list_offset</code>.\nOffset to LookupList table, from beginning of GPOS table\nDifferent enumerations for GSUB and GPOS\nAttempt to resolve <code>mark1_array_offset</code>.\nOffset to MarkArray table for mark1, from beginning of …\nAttempt to resolve <code>mark1_coverage_offset</code>.\nOffset to Combining Mark Coverage table, from beginning of …\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nAttempt to resolve <code>mark2_array_offset</code>.\nOffset to Mark2Array table for mark2, from beginning of …\nNumber of Mark2 records\nAttempt to resolve <code>mark2_coverage_offset</code>.\nOffset to Base Mark Coverage table, from beginning of …\nArray of Mark2Records, in Coverage order.\nOffset to Anchor table, from beginning of MarkArray table.\nOffset to Anchor table, from beginning of MarkArray table.\nOffset to Anchor table, from beginning of MarkArray table.\nAttempt to resolve <code>mark_array_offset</code>.\nAttempt to resolve <code>mark_array_offset</code>.\nOffset to MarkArray table, from beginning of MarkBasePos …\nOffset to MarkArray table, from beginning of MarkLigPos …\nClass defined for the associated mark.\nClass defined for the associated mark.\nNumber of classes defined for marks\nNumber of defined mark classes\nNumber of Combining Mark classes defined\nNumber of MarkRecords\nAttempt to resolve <code>mark_coverage_offset</code>.\nAttempt to resolve <code>mark_coverage_offset</code>.\nOffset to markCoverage table, from beginning of MarkBasePos\nOffset to markCoverage table, from beginning of MarkLigPos …\nArray of MarkRecords, ordered by corresponding glyphs in …\nCreates a new value context that doesn’t do any …\nReturns the complement of this set of flags.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nNumber of PairSet tables\nArray of offsets to PairSet tables. Offsets are from …\nA dynamically resolving wrapper for <code>pair_set_offsets</code>.\nNumber of PairValueRecords\nArray of PairValueRecords, ordered by glyph ID of the …\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nReads a value directly from font data.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nReturn the number of bytes required to store a <code>ValueRecord</code> …\nRemoves the specified flags in-place.\nAttempt to resolve <code>script_list_offset</code>.\nOffset to ScriptList table, from beginning of GPOS table\nGlyph ID of second glyph in the pair (first glyph is …\nGlyph ID of second glyph in the pair (first glyph is …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturn the subtables for this lookup.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns a resolved value for the given normalized …\nNumber of ValueRecords — must equal glyphCount in the …\nDefines the types of data in the ValueRecord.\nDefines the types of data in the ValueRecords.\nDefines the types of data in the ValueRecord.\nDefines the types of data in valueRecord1 — for the first\nValueRecord definition — for the first glyph of the pair …\nDefines the types of data in valueRecord1 — for the first\nDefines the types of data in valueRecord2 — for the …\nValueRecord definition — for the second glyph of the pair\nDefines the types of data in valueRecord2 — for the …\nDefines positioning value(s) — applied to all glyphs in …\nPositioning data for the first glyph in the pair.\nPositioning for first glyph — empty if valueFormat1 = 0.\nPositioning data for the first glyph in the pair.\nPositioning for first glyph — empty if valueFormat1 = 0.\nPositioning data for the second glyph in the pair.\nPositioning for second glyph — empty if valueFormat2 = 0.\nPositioning data for the second glyph in the pair.\nPositioning for second glyph — empty if valueFormat2 = 0.\nArray of ValueRecords — positioning values applied to …\nReturns the pair of values for the given classes, …\nThe major and minor version of the GPOS table, as a tuple …\nSets the normalized variation coordinates for this value …\nSets the item variation store for this value context.\nHorizontal value, in design units\nHorizontal value, in design units\nHorizontal value, in design units\nHorizontal value, in design units\nAttempt to resolve <code>x_device_offset</code>.\nAttempt to resolve the <code>Device</code> or <code>VariationIndex</code> table for …\nOffset to Device table (non-variable font) / VariationIndex\nVertical value, in design units\nVertical value, in design units\nVertical value, in design units\nVertical value, in design units\nAttempt to resolve <code>y_device_offset</code>.\nAttempt to resolve the <code>Device</code> or <code>VariationIndex</code> table for …\nOffset to Device table (non-variable font) / VariationIndex\nPart of AlternateSubstFormat1\nAlternate Substitution Format 1\nExtension Substitution Subtable Format 1\nA GSUB Extension Substitution subtable\nGSUB\nPart of LigatureSubstFormat1\nPart of LigatureSubstFormat1\nLigature Substitution Format 1\nMultiple Substitution Format 1\nReverse Chaining Contextual Single Substitution Format 1\nPart of MultipleSubstFormat1\nLookupType 1: Single Substitution Subtable\nSingle Substitution Format 1\nSingle Substitution Format 2\nA GSUB ChainedSequenceContext\nA GSUB Lookup subtable.\nA typed GSUB LookupList table\nA GSUB SequenceContext\nThe subtables from a GPOS lookup.\nArray of alternate glyph IDs, in arbitrary order\nNumber of AlternateSet tables\nArray of offsets to AlternateSet tables. Offsets are from …\nA dynamically resolving wrapper for <code>alternate_set_offsets</code>.\nArray of offsets to coverage tables in backtrack sequence, …\nA dynamically resolving wrapper for …\nNumber of glyphs in the backtrack sequence.\nReturn the set of glyphs reachable from the input set via …\nUpdate the set of lookup indices with all lookups …\nReturn a set of all feature indices underneath the …\nReturn a set of lookups referenced by the specified …\nNumber of components in the ligature\nArray of component glyph IDs — start with the second …\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nOffset to Coverage table, from beginning of substitution …\nOffset to Coverage table, from beginning of substitution …\nOffset to Coverage table, from beginning of substitution …\nOffset to Coverage table, from beginning of substitution …\nOffset to Coverage table, from beginning of substitution …\nOffset to Coverage table, from beginning of substitution …\nOffset to Coverage table, from beginning of substitution …\nAdd to original glyph ID to get substitute glyph ID\nAttempt to resolve <code>extension_offset</code>.\nLookup type of subtable referenced by extensionOffset …\nOffset to the extension subtable, of lookup type …\nAttempt to resolve <code>feature_list_offset</code>.\nOffset to FeatureList table, from beginning of GSUB table\nAttempt to resolve <code>feature_variations_offset</code>.\nOffset to FeatureVariations table, from beginning of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of glyph IDs in the substituteGlyphIDs array\nNumber of glyph IDs in the substituteGlyphIDs array. This …\nNumber of glyph IDs in the alternateGlyphIDs array\nNumber of glyph IDs in the substituteGlyphIDs array.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of Ligature tables\nglyph ID of ligature to substitute\nArray of offsets to Ligature tables. Offsets are from …\nNumber of LigatureSet tables\nArray of offsets to LigatureSet tables. Offsets are from …\nA dynamically resolving wrapper for <code>ligature_set_offsets</code>.\nA dynamically resolving wrapper for <code>ligature_offsets</code>.\nArray of offsets to coverage tables in lookahead sequence, …\nA dynamically resolving wrapper for …\nNumber of glyphs in lookahead sequence.\nAttempt to resolve <code>lookup_list_offset</code>.\nOffset to LookupList table, from beginning of GSUB table\nDifferent enumerations for GSUB and GPOS\nReturn the <code>FontData</code> used to resolve offsets for this table.\nAttempt to resolve <code>script_list_offset</code>.\nOffset to ScriptList table, from beginning of GSUB table\nNumber of Sequence table offsets in the sequenceOffsets …\nArray of offsets to Sequence tables. Offsets are from …\nA dynamically resolving wrapper for <code>sequence_offsets</code>.\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat identifier. Set to 1.\nFormat identifier: format = 1\nFormat identifier: format = 1\nArray of substitute glyph IDs — ordered by Coverage index\nString of glyph IDs to substitute\nArray of substitute glyph IDs — ordered by Coverage …\nReturn the subtables for this lookup.\nThe major and minor version of the GSUB table, as a tuple …\nDelta information for a single point or component in a …\nVariation data specialized for the glyph variations table.\nThe GlyphVariationData table\nThe ‘gvar’ header\nIf set, offsets to GlyphVariationData are 32 bits\nArray of tuple records shared across all glyph variation …\nReturns the set containing all flags.\nApplies a tuple scalar to this delta.\nThe number of variation axes for this font. This must be …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturn the raw data for this gid.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nBit-field that gives the format of the offset array that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nThe number of glyphs in this font. This must match the …\nGet the variation data for a specific glyph.\nOffset from the start of this table to the array of …\nOffsets from the start of the GlyphVariationData array to …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the phantom point deltas for the given variation …\nThe point or component index.\nA constructor that requires additional arguments.\nRemoves the specified flags in-place.\nAttempt to resolve <code>serialized_data_offset</code>.\nOffset from the start of the GlyphVariationData table to …\nThe number of shared tuple records. Shared tuple records …\nAttempt to resolve <code>shared_tuples_offset</code>.\nOffset from the start of this table to the shared tuple …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nA packed field. The high 4 bits are flags, and the low 12 …\nArray of tuple variation headers.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nMajor/minor version number of the glyph variations table …\nThe x delta.\nThe y delta.\nThe Horizontal Device Metrics table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum width.\nMaximum width.\nNumber of device records.\nPixel size for following widths (as ppem).\nPixel size for following widths (as ppem).\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nReturns for the device record that exactly matches the …\nArray of device records.\nSize of device record, 32-bit aligned.\nTable version number (set to 0).\nArray of widths, indexed by glyph id.\nArray of glyphs (numGlyphs is from the ‘maxp’ table).\nBit 0: Baseline for font at y=0.\nBit 0: Bold (if set to 1)\nBit 5: Condensed (if set to 1)\nBit 12: Font converted (produce compatible metrics).\nBit 6: Extended (if set to 1)\nBit 3: Force ppem to integer values for all internal …\nThe <code>flags</code> field for the head table.\nThe head (font header) table.\nBit 4: Instructions may alter advance width (the advance …\nBit 2: Instructions may depend on point size.\nBit 1: Italic (if set to 1)\nBit 14: Last Resort font. If set, indicates that the …\nBit 11: Font data is “lossless” as a result of having …\nBit 1: Left sidebearing point at x=0 (relevant only for …\nThe <code>macStyle</code> field for the head table.\nBit 13: Font optimized for ClearType. Note, fonts that …\nBit 3: Outline (if set to 1)\nBit 4: Shadow (if set to 1)\nBit 2: Underline (if set to 1)\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nTo compute: set it to 0, sum the entire font as uint32, …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nNumber of seconds since 12:00 midnight that started …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nSee the flags enum.\nDeprecated (Set to 2).\nSet by font manufacturer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\n0 for current format.\n0 for short offsets (Offset16), 1 for long (Offset32).\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nSmallest readable size in pixels.\nBits identifying the font’s style; see MacStyle\nSet to 0x5F0F3CF5.\nNumber of seconds since 12:00 midnight that started …\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nSet to a value from 16 to 16384. Any value in this range is\nVersion number of the font header table, set to (1, 0)\nMaximum x coordinate across all glyph bounding boxes.\nMinimum x coordinate across all glyph bounding boxes.\nMaximum y coordinate across all glyph bounding boxes.\nMinimum y coordinate across all glyph bounding boxes.\nhhea Horizontal Header Table\nMaximum advance width value in ‘hmtx’ table.\nTypographic ascent.\nThe amount by which a slanted highlight on a glyph needs …\nUsed to calculate the slope of the cursor (rise/run); 1 for\n0 for vertical caret, 1 for horizontal.\nTypographic descent.\nTypographic line gap. Negative LineGap values are treated …\n0 for current format.\nMinimum left sidebearing value in ‘hmtx’ table for …\nMinimum right sidebearing value; calculated as min(aw - …\nNumber of hMetric entries in ‘hmtx’ table\nThe major/minor version (1, 0)\nMax(lsb + (xMax-xMin))\nThe hmtx (Horizontal Metrics) table\nReturns the advance width for the given glyph identifier.\nAdvance width/height, in font design units.\nAdvance width/height, in font design units.\nReturns the argument unchanged.\nPaired advance width/height and left/top side bearing …\nCalls <code>U::from(self)</code>.\nLeading (left/top) side bearings for glyph IDs greater …\nA constructor that requires additional arguments.\nReturns the left side bearing for the given glyph …\nGlyph leading (left/top) side bearing, in font design …\nGlyph leading (left/top) side bearing, in font design …\nThe HVAR (Horizontal Metrics Variations) table\nReturns the advance width delta for the specified glyph …\nAttempt to resolve <code>advance_width_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nAttempt to resolve <code>item_variation_store_offset</code>.\nOffset in bytes from the start of this table to the item …\nReturns the left side bearing delta for the specified …\nAttempt to resolve <code>lsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nReturns the left side bearing delta for the specified …\nAttempt to resolve <code>rsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nMajor version number of the horizontal metrics variations …\nThe Apple Advanced Typography kerning table.\nA subtable in an AAT <code>kern</code> table.\nThe kerning table.\nThe OpenType kerning table.\nA subtable in an OT <code>kern</code> table.\nA subtable in the <code>kern</code> table.\nThe type 0 <code>kern</code> subtable.\nThe type 2 <code>kern</code> subtable.\nClass table for the type 2 <code>kern</code> subtable.\nThe type 3 ‘kern’ subtable.\nThe various <code>kern</code> subtable formats.\nOffset to kerning value array.\nCircumstances under which this table is used.\nCircumstances under which this table is used.\nSubtable specific data.\nSubtable specific data.\nThis is calculated as log2 of the largest power of two …\nFirst glyph in class range.\nSet to zero (reserved for future use).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of glyphs in this font.\nSize of the header of the containing subtable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the table has cross-stream kerning values.\nTrue if the table has horizontal kerning values.\nTrue if the table is represented by a state machine.\nTrue if the table has variation kerning values.\nTrue if the table has vertical kerning values.\nThe indices into the kernValue array.\nThe kerning values.\nThe number of kerning values.\nReturns the kerning adjustment for the given pair.\nReturns the kerning adjustment for the given pair.\nReturns the kerning adjustment for the given pair.\nReturns an enum representing the actual subtable data.\nThe left-hand classes.\nThe number of left-hand classes.\nLeft-hand offset table.\nThe length of this subtable in bytes, including this …\nThe length of this subtable in bytes, including this …\nNumber of glyph in class range.\nThe number of kerning pairs in this subtable.\nNumber of subtables in the kerning table.\nThe number of subtables included in the kerning table.\nThe offsets array for all of the glyphs in the range.\nKerning records.\nThe value of nPairs minus the largest power of two less …\nThe right-hand classes.\nThe number of right-hand classes.\nRight-hand offset table.\nThe largest power of two less than or equal to the value …\nData for subtables, immediately following the header.\nData for subtables, immediately following the header.\nReturns an iterator over all of the subtables in this <code>kern</code> …\nThe tuple index (used for variations fonts). This value …\nTable version number—set to 0.\nThe version number of the kerning table (0x00010000 for …\nKern subtable version number– set to 0.\nSequence of indices into the <code>ankr</code> table.\nSequence of coordinate values.\nSequence of glyph outline point indices.\nThe kerx (Extended Kerning) table.\nA subtable in a <code>kerx</code> table.\nThe type 0 <code>kerx</code> subtable.\nThe type 0 <code>kerx</code> subtable kerning record.\nThe type 1 <code>kerx</code> subtable.\nThe type 2 <code>kerx</code> subtable.\nThe type 4 <code>kerx</code> subtable.\nActions for the type 4 <code>kerx</code> subtable.\nThe type 6 <code>kerx</code> subtable.\nThe various <code>kerx</code> subtable formats.\nKerning values.\nCircumstances under which this table is used.\nSubtable specific data.\nThis is calculated as log2 of the largest power of two …\nFlags for control point positioning.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the table has cross-stream kerning values.\nTrue if the table has horizontal kerning values.\nTrue if the table has variation kerning values.\nTrue if the table has vertical kerning values.\nReturns the kerning adjustment for the given pair.\nReturns the kerning adjustment for the given pair.\nReturns the kerning adjustment for the given pair.\nReturns an enum representing the actual subtable data.\nThe glyph index for the lefthand glyph in the kerning pair.\nThe glyph index for the lefthand glyph in the kerning pair.\nLeft-hand offset table.\nThe length of this subtable in bytes, including this …\nThe number of kerning pairs in this subtable.\nThe number of subtables included in the extended kerning …\nKerning records.\nProcess direction flag. If clear, process the glyphs …\nThe value of nPairs minus the largest power of two less …\nThe glyph index for the righthand glyph in the kerning …\nThe glyph index for the righthand glyph in the kerning …\nRight-hand offset table.\nThe largest power of two less than or equal to the value …\nThe tuple count. This value is only used with variation …\nKerning value.\nKerning value.\nContains the set of kerning values, one for each state.\nThe version number of the extended kerning table …\nPart of ChainedSequenceContextFormat2\nPart of ChainedSequenceContextFormat2\nChained Sequence Context Format 1\nChained Sequence Context Format 2\nChained Sequence Context Format 3\nPart of ChainedSequenceContextFormat1\nPart of ChainedSequenceContextFormat1\nfeatureParams for ‘cv01’-‘cv99’\nA Class Definition Table\nClass Definition Table Format 1\nClass Definition Table Format 2\nUsed in ClassDefFormat2\nPart of SequenceContextFormat2\nPart of SequenceContextFormat2\nCondition Table\nCondition Table Format 1: Font Variation Axis Range\nCondition Table Format 2: Variation index\nCondition Table Format 3: AND\nCondition Table Format 4: OR\nCondition Table Format 5: NOT\nConditionSet Table\nCoverage Format 1\nCoverage Format 2\nCoverage Table\nDevice delta formats\nDevice Table\nEither a Device table (in a non-variable font) or a …\nA trait that abstracts the behaviour of an extension …\nFeature Table\nFeature List Table\nAn enum for different possible tables referenced by …\nPart of FeatureList\nFeatureTableSubstitution Table\nUsed in FeatureTableSubstitution\nPart of FeatureVariations\nFeatureVariations Table\nIf set, skips over base glyphs\nIf set, skips over ligatures\nIf set, skips over all combining marks\nLanguage System Table\nSigned 2-bit value, 8 values per uint16\nSigned 4-bit value, 4 values per uint16\nSigned 8-bit value, 2 values per uint16\nLookup Table\nThe LookupFlag bit enumeration.\nLookup List Table\nThis bit relates only to the correct processing of GPOS …\nUsed in CoverageFormat2\nScript Table\nScript List Table\nScript Record\nA prioritized list of OpenType script tags mapped from a …\nA script chosen from a set of candidate tags.\nSequence Context Format 1\nSequence Context Format 2\nSequence Context Format 3\nSequence Lookup Record\nPart of SequenceContextFormat1\nPart of SequenceContextFormat1\nan array of subtables, maybe behind extension lookups\nCombination of a tag and a child table.\nIf set, indicates that the lookup table structure is …\nVariation index table\nVariationIndex table, contains a delta-set index pair.\nOffset to an alternate feature table, from start of the …\nOffset to an alternate feature table, from start of the …\nReturns a slice containing the mapped script tags.\nIndex (zero-based) for the variation axis within the ‘…\nAttempt to resolve <code>backtrack_class_def_offset</code>.\nOffset to ClassDef table containing backtrack sequence …\nArray of offsets to coverage tables for the backtrack …\nA dynamically resolving wrapper for …\nNumber of glyphs in the backtrack sequence\nNumber of glyphs in the backtrack sequence\nNumber of glyphs in the backtrack sequence\nArray of backtrack glyph IDs\nArray of backtrack-sequence classes\nNumber of ChainedClassSequenceRule tables\nArray of offsets to ChainedClassSequenceRule tables, from …\nNumber of ChainedClassSequenceRuleSet tables\nArray of offsets to ChainedClassSequenceRuleSet tables, …\nA dynamically resolving wrapper for …\nA dynamically resolving wrapper for …\nNumber of ChainedSequenceRule tables\nArray of offsets to ChainedSequenceRule tables, from …\nNumber of ChainedSequenceRuleSet tables\nArray of offsets to ChainedSeqRuleSet tables, from …\nA dynamically resolving wrapper for …\nA dynamically resolving wrapper for …\nThe count of characters for which this feature provides …\nThe Unicode Scalar Value of the characters for which this …\nApplied to all glyphs in the range\nApplied to all glyphs in the range\nAttempt to resolve <code>class_def_offset</code>.\nOffset to ClassDef table, from beginning of …\nFormat identifier — format = 1\nFormat identifier — format = 2\nFormat identifier — format = 1\nNumber of ClassRangeRecords\nArray of ClassRangeRecords — ordered by startGlyphID\nNumber of ClassSequenceRule tables\nArray of offsets to ClassSequenceRule tables, from …\nNumber of ClassSequenceRuleSet tables\nArray of offsets to ClassSequenceRuleSet tables, from …\nA dynamically resolving wrapper for …\nA dynamically resolving wrapper for <code>class_seq_rule_offsets</code>.\nArray of Class Values — one per glyph ID\nAttempt to resolve <code>condition_offset</code>.\nNumber of conditions for this condition set.\nNumber of conditions.\nNumber of conditions.\nCondition to negate.\nArray of offsets to condition tables, from beginning of the\nArray of condition tables for this conjunction (AND) …\nArray of condition tables for this disjunction (OR) …\nOffset to a condition set table, from beginning of …\nOffset to a condition set table, from beginning of …\nOffset to a condition set table, from beginning of …\nA dynamically resolving wrapper for <code>condition_offsets</code>.\nA dynamically resolving wrapper for <code>condition_offsets</code>.\nA dynamically resolving wrapper for <code>condition_offsets</code>.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturn the cost of looking up a glyph in this table\nReturn the cost of looking up a glyph in this table\nReturn the cost of looking up a glyph in this table\nReturn the cost of looking up a glyph in this table\nReturn the cost of looking up a glyph in this table\nReturn the cost of looking up a glyph in this table\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nFormat identifier — format = 1\nFormat identifier — format = 2\nFormat identifier — format = 1\nOffset to Coverage table, from beginning of …\nOffset to Coverage table, from beginning of …\nOffset to Coverage table, from beginning of …\nOffset to Coverage table, from beginning of …\nArray of offsets to Coverage tables, from beginning of …\nA dynamically resolving wrapper for <code>coverage_offsets</code>.\nAttempt to resolve <code>default_lang_sys_offset</code>.\nOffset to default LangSys table, from beginning of Script …\nValue at default instance.\nFormat of deltaValue array data: 0x0001, 0x0002, or 0x0003\nFormat, = 0x8000\nA delta-set inner index — used to select a delta-set row …\nA delta-set outer index — used to select an item …\nArray of compressed data\nThe first value represents the design size in 720/inch …\nReturn new, empty flags\nLast glyph ID in the range\nLast glyph ID in the range\nLast glyph ID in the range\nLast glyph ID in the range\nLargest size to correct, in ppem\nThe ‘name’ table name ID that specifies a string (or …\nThe ‘name’ table name ID that specifies a string (or …\nOffset to Feature table, from beginning of FeatureList\nNumber of FeatureRecords in this table\nThe feature table index to match.\nThe feature table index to match.\nNumber of feature index values for this language system —\nIf the language system references a feature with the given …\nArray of indices into the FeatureList, in arbitrary order\nOffset to Feature table, from beginning of FeatureList\nOffset to Feature table, from beginning of FeatureList\nAttempt to resolve <code>feature_params_offset</code>.\nOffset from start of Feature table to FeatureParams table, …\nArray of FeatureRecords — zero-based (first feature has …\nOffset to a feature table substitution table, from …\nOffset to a feature table substitution table, from …\nOffset to a feature table substitution table, from …\n4-byte feature identification tag\n4-byte feature identification tag\nNumber of feature variation records.\nArray of feature variation records.\nMaximum value of the font variation instances that satisfy …\nMinimum value of the font variation instances that satisfy …\nThe first ‘name’ table name ID used to specify strings …\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 3\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 3\nFormat, = 1\nFormat, = 2\nFormat, = 3\nFormat, = 4\nFormat, = 5\nFormat number is set to 0.\nFormat identifier: format = 1\nFormat identifier: format = 1\nFormat, = 1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a LookupFlag from a raw value, discarding …\nGiven a Unicode script code, returns a prioritized list of …\nReturn the subtable at the given index\nReturns the tag and script at the given index.\nReturns the tag and feature at the given index.\nIf this glyph is in the coverage table, returns its index\nIf this glyph is in the coverage table, returns its index\nGet the class for this glyph id\nGet the class for this glyph id\nIf this glyph is in the coverage table, returns its index\nGet the class for this glyph id\nArray of glyph IDs — in numerical order\nNumber of glyphs in the glyph array\nSize of the classValueArray\nNumber of glyphs in the input glyph sequence\nNumber of glyphs to be matched\nNumber of glyphs in the input sequence\nThe second value has no independent meaning, but serves as …\nIndex of the script in the <code>ScriptList</code>.\nReturns the index of the script with the given tag.\nAttempt to resolve <code>input_class_def_offset</code>.\nOffset to ClassDef table containing input sequence context,\nArray of offsets to coverage tables for the input sequence\nA dynamically resolving wrapper for <code>input_coverage_offsets</code>.\nNumber of glyphs in the input sequence\nTotal number of glyphs in the input sequence\nNumber of glyphs in the input sequence\nArray of input glyph IDs—starting with the second glyph\nSequence of classes to be matched to the input glyph …\nArray of input glyph IDs—start with second glyph\nArray of input sequence classes, beginning with the second …\nReturns class values for the intersected glyphs of this …\nReturns the intersection of this table and input ‘glyphs…\nReturns intersected glyphs of this table and input ‘…\nReturns if this table contains at least one glyph in the …\nReturns if this table contains at least one glyph in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if a script was chosen that wasn’t in the requested …\nReturn an iterator over all the subtables in the collection\nIterate over each glyph and its class.\nIterate over each glyph and its class.\nIterate over the decoded values for this device\nIterate over each glyph and its class.\nReturns the language system with the given index.\nOffset to LangSys table, from beginning of Script table\nNumber of LangSysRecords for this script — excluding the …\nIf the script contains a language system with the given …\nOffset to LangSys table, from beginning of Script table\nOffset to LangSys table, from beginning of Script table\nArray of LangSysRecords, listed alphabetically by LangSys …\n4-byte LangSysTag identifier\n4-byte LangSysTag identifier\nThe number of subtables in this collection\nAttempt to resolve <code>lookahead_class_def_offset</code>.\nOffset to ClassDef table containing lookahead sequence …\nArray of offsets to coverage tables for the lookahead …\nA dynamically resolving wrapper for …\nNumber of glyphs in the lookahead sequence\nNumber of glyphs in the lookahead sequence\nNumber of glyphs in the lookahead sequence\nArray of lookahead glyph IDs\nArray of lookahead-sequence classes\nNumber of lookups in this table\nLookup qualifiers\nNumber of LookupList indices for this feature\nIndex (zero-based) into the LookupList\nIndex (zero-based) into the LookupList\nArray of indices into the LookupList — zero-based (first …\nArray of offsets to Lookup tables, from beginning of …\nDifferent enumerations for GSUB and GPOS\nA dynamically resolving wrapper for <code>lookup_offsets</code>.\nIf not zero, skips over all marks of attachment type …\nIndex (base 0) into GDEF mark glyph sets structure. This …\nThe third value enables applications to use a single name …\nCreate from a raw scalar.\nNumber of named parameters. (May be zero.)\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the number of glyphs in this table\nReturn the number of glyphs in this table\nReturn the number of glyphs explicitly assigned to a class …\nReturn the number of glyphs explicitly assigned to a class …\nReturn the number of glyphs in this record\nReturn the number of glyphs in this table\nReturn the number of glyphs explicitly assigned to a class …\nReturn the number of glyphs explicitly assigned to a class …\nNumber of RangeRecords\nArray of glyph ranges — ordered by startGlyphID.\nThe fourth and fifth values represent the small end of the …\nA constructor that requires additional arguments.\nIndex of a feature required for this language system; if no\nThe ‘name’ table name ID that specifies sample text …\nOffset to Script table, from beginning of ScriptList\nNumber of ScriptRecords\nOffset to Script table, from beginning of ScriptList\nOffset to Script table, from beginning of ScriptList\nArray of ScriptRecords, listed alphabetically by script tag\n4-byte script tag identifier\n4-byte script tag identifier\nFinds the first available script that matches one of the …\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nArray of Sequence lookup records\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nNumber of SequenceRule tables\nArray of offsets to SequenceRule tables, from beginning of …\nNumber of SequenceRuleSet tables\nArray of offsets to SequenceRuleSet tables, from beginning …\nA dynamically resolving wrapper for <code>seq_rule_set_offsets</code>.\nA dynamically resolving wrapper for <code>seq_rule_offsets</code>.\nIndex (zero-based) into the input glyph sequence\nIndex (zero-based) into the input glyph sequence\nIf not zero, skips over all marks of attachment type …\nCoverage Index of first glyph ID in range\nCoverage Index of first glyph ID in range\nFirst glyph ID of the classValueArray\nFirst glyph ID in the range\nFirst glyph ID in the range\nFirst glyph ID in the range\nFirst glyph ID in the range\nSmallest size to correct, in ppem\nNumber of subtables for this lookup\nNumber of feature table substitution records.\nArray of feature table substitution records.\nArray of offsets to lookup subtables, from beginning of …\nA dynamically resolving wrapper for <code>subtable_offsets</code>.\nThe actual OpenType tag of the chosen script.\nRaw transmutation to u16.\nThe ‘name’ table name ID that specifies a string (or …\nVariation index to vary the value based on current …\nMajor &amp; minor version of the table: (1, 0)\nThe loca table.\nReturns the argument unchanged.\nAttempt to return the offset for a given glyph id.\nCalls <code>U::from(self)</code>.\nOffset and length of string in <code>ltag</code> table.\nThe language tag table.\nTable flags; currently none defined.\nReturns the argument unchanged.\nReturns the index of the given language tag.\nCalls <code>U::from(self)</code>.\nString length (in bytes).\nString length (in bytes).\nNumber of language tags which follow.\nOffset from the start of the table to the beginning of the …\nOffset from the start of the table to the beginning of the …\nReturns an iterator yielding the index and string value of …\nRange of each tag’s string.\nTable version; currently 1.\n<code>maxp</code>\nMaximum levels of recursion; 1 for simple components.\nMaximum number of components referenced at “top level” …\nMaximum contours in a composite glyph.\nMaximum points in a composite glyph.\nMaximum contours in a non-composite glyph.\nNumber of FDEFs, equal to the highest function number + 1.\nNumber of IDEFs.\nMaximum points in a non-composite glyph.\nMaximum byte count for glyph instructions.\nMaximum stack depth across Font Program (‘fpgm’ …\nNumber of Storage Area locations.\nMaximum points used in Z0.\n1 if instructions do not use the twilight zone (Z0), or 2 …\nThe number of glyphs in the font.\nThe version: 0x00005000 for version 0.5, 0x00010000 for …\n…\n<code>meta</code>\nData stored in the ‘meta’ table.\nOther metadata, which may exist in certain apple fonts\nUsed for the ‘dlng’ and ‘slng’ metadata\nOffset in bytes from the beginning of the metadata table …\nLength of the data, in bytes. The data is not required to …\nLength of the data, in bytes. The data is not required to …\nArray of data map records.\nThe number of data maps in the table.\nOffset in bytes from the beginning of the metadata table …\nOffset in bytes from the beginning of the metadata table …\nFlags — currently unused; set to 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA tag indicating the type of metadata.\nA tag indicating the type of metadata.\nVersion number of the metadata table — set to 1.\nA chain in a <code>morx</code> table.\nEntry payload in a contextual subtable state machine.\nContextual glyph substitution subtable.\nUsed to compute the sub-feature flags for a list of …\nEntry payload in an insertion subtable state machine.\nInsertion glyph substitution subtable.\nLigature glyph substitution subtable.\nThe morx (Extended Glyph Metamorphosis) table.\nA subtable in a <code>morx</code> chain.\nThe various <code>morx</code> subtable formats.\nTotal byte count, including this header; must be a …\nArray of component indices which are summed to determine …\nCoverage flags and subtable type.\nIndex of the substitution table for the current glyph (use …\nIndex of the substitution table for the current glyph (use …\nZero-based index into the insertion glyph table. The …\nZero-based index into the insertion glyph table. The …\nData for specific subtable.\nThe default specification for subtables.\nComplement of flags for the settings that this feature and …\nComplement of flags for the settings that this feature and …\nFlags for the settings that this feature and setting …\nFlags for the settings that this feature and setting …\nThe feature’s setting (aka selector).\nThe feature’s setting (aka selector).\nThe type of feature.\nThe type of feature.\nFeature entries for this chain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsertion glyph table. The index and count of glyphs to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this subtable will be applied to both horizontal …\nIf true, this subtable will process glyphs in descending …\nIf true, this subtable will process glyphs in logical …\nIf true, this subtable will only be applied to vertical …\nReturns an enum representing the actual subtable data.\nTotal subtable length, including this header.\nContains the set of ligature stack actions, one for each …\nOutput ligature glyphs.\nList of lookups specifying substitutions. The index into …\nIndex of the substitution table for the marked glyph (use …\nIndex of the substitution table for the marked glyph (use …\nZero-based index into the insertion glyph table. The …\nZero-based index into the insertion glyph table. The …\nNumber of metamorphosis chains contained in this table.\nNumber of feature subtable entries.\nThe number of subtables in the chain.\nThe 32-bit mask identifying which subtable this is (the …\nArray of chain subtables.\nVersion number of the extended glyph metamorphosis table …\nThe MVAR (Metrics Variations) table\nValueRecord metrics variation record\nA delta-set inner index — used to select a delta-set row …\nA delta-set inner index — used to select a delta-set row …\nA delta-set outer index — used to select an item …\nA delta-set outer index — used to select an item …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt to resolve <code>item_variation_store_offset</code>.\nOffset in bytes from the start of this table to the item …\nReturns the metric delta for the specified tag and …\nFour-byte tags used to represent particular metric or …\nThe number of value records — may be zero.\nThe size in bytes of each value record — must be greater …\nArray of value records that identify target items and the …\nFour-byte tag identifying a font-wide measure.\nFour-byte tag identifying a font-wide measure.\nMajor version number of the horizontal metrics variations …\nCap height.\nGaspRange[0]\nGaspRange[1]\nGaspRange[2]\nGaspRange[3]\nGaspRange[4]\nGaspRange[5]\nGaspRange[6]\nGaspRange[7]\nGaspRange[8]\nGaspRange[9]\nHorizontal ascender.\nHorizontal clipping ascent.\nHorizontal clipping descent.\nHorizontal caret offset.\nHorizontal caret run.\nHorizontal caret rise.\nHorizontal descender.\nHorizontal line gap.\nSubscript em x-offset.\nSubscript em x-size.\nSubscript em y-offset.\nSubscript em y-size.\nSuperscript em x-offset.\nSuperscript em x-size.\nSuperscript em y-offset.\nSuperscript em y-size.\nStrikeout offset.\nStrikeout size.\nUnderline offset.\nUnderline size.\nVertical ascender.\nVertical caret offset.\nVertical caret run.\nVertical caret rise.\nVertical descender.\nVertical line gap.\nX-height.\nCompatible full (Macintosh only).\nCopyright notice.\nAn iterator over the chars of a name record.\nDark background palette.\nDescription of the typeface.\nName of the designer of the typeface.\nURL of typeface designer (with protocol, e.g., http://, …\nThe encoding used by the name table.\nFont family name.\nFull font name that reflects all family and relevant …\nThe last value that is available for font-specific names.\nThe last value that is explicitly reserved for standard …\nLicense description.\nURL where additional licensing information can be found.\nLight background palette.\nPart of Name\nManufacturer name.\nA helper for encoding and decoding Mac OS Roman encoded …\nNaming table version 1\nIdentifier for an informational string (or name).\nName Records\nEntry for a name in the naming table.\nPostScript CID findfont name.\nPostScript name for the font.\nSample text.\nFont subfamily name.\nTrademark; this is used to save any trademark …\nTypographic family name.\nTypographic subfamily name.\nUnique font identifier.\nVariations PostScript name prefix.\nURL of font vendor (with protocol, e.g., http://, ftp://).\nVersion string.\nWWS family name.\nWWS subfamily name.\nAn iterator over the <code>char</code>s in this name.\nReturns a new <code>NameId</code> by adding <code>rhs</code> to the current value.\nNumber of name records.\nConvert from a mac-roman encoded byte to a <code>char</code>\nconvert from a char to a mac-roman encoded byte, if the …\nPlatform-specific encoding ID.\nPlatform-specific encoding ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is in the range <code>0..=255</code> (reserved for …\nReturn a type that can decode the string data for this …\nNumber of language-tag records.\nLanguage-tag string offset from start of storage area (in …\nLanguage-tag string offset from start of storage area (in …\nThe language-tag records where langTagCount is the number …\nLanguage ID.\nLanguage ID.\nLanguage-tag string length (in bytes)\nString length (in bytes).\nLanguage-tag string length (in bytes)\nString length (in bytes).\nName ID.\nName ID.\nThe name records where count is the number of records.\nCreate a new identifier from a raw u16 value.\nDetermine the coding from the platform and encoding id.\nPlatform ID.\nPlatform ID.\nReturns an iterator over the set of predefined identifiers …\nOffset to start of string storage (from start of table).\nReturn a type that can decode the string data for this …\nThe FontData containing the encoded name strings.\nString offset from start of storage area (in bytes).\nString offset from start of storage area (in bytes).\nReturn the memory representation of this identifier as a …\nReturn the identifier as a u16.\nTable version number (0 or 1)\nBit 5: Glyphs are emboldened.\nBit 0: Font contains italic or oblique glyphs, otherwise …\nBit 2: Glyphs have their foreground and background …\nBit 9: Font contains oblique glyphs.\nBit 3: Outline (hollow) glyphs, otherwise they are solid.\n<code>OS/2</code>\nBit 6: Glyphs are in the standard weight/style for the …\nBit 4: Glyphs are overstruck.\nOS/2 selection flags\nBit 1: Glyphs are underscored.\nBit 7: If set, it is strongly recommended that …\nBit 8: The font has ‘name’ table strings consistent …\nFont Vendor Identification.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nFont selection flags.\nType flags.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nPANOSE classification number.\nRemoves the specified flags in-place.\nThis metric specifies the distance between the baseline …\nFont-family class and subclass. This parameter is a …\nThe typographic ascender for this font.\nThe typographic descender for this font.\nThe typographic line gap for this font.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nThis metric specifies the distance between the baseline …\nToggles the specified flags in-place.\nCode page character range bits 0-31.\nCode page character range bits 32-63.\nUnicode Character Range.\nUnicode Character Range (bits 32-63).\nUnicode Character Range (bits 64-95).\nUnicode Character Range (bits 96-127).\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThis is the Unicode codepoint, in UTF-16 encoding, of a …\nThis is the Unicode codepoint, in UTF-16 encoding, of a …\nThe minimum Unicode index (character code) in this font.\nThe maximum Unicode index (character code) in this font.\nThis field is used for fonts with multiple optical styles.\nThis field is used for fonts with multiple optical styles.\nThis field is used for fonts with multiple optical styles.\nWeight class.\nWidth class.\nThe “Windows ascender” metric.\nThe “Windows descender” metric.\nAverage weighted escapement.\nThe position of the top of the strikeout stroke relative …\nThickness of the strikeout stroke in font design units.\nThe recommended horizontal offset in font design units for …\nThe recommended horizontal size in font design units for …\nThe recommended vertical offset in font design units for …\nThe recommended vertical size in font design units for …\nThe recommended horizontal offset in font design units for …\nThe recommended horizontal size in font design units for …\nThe recommended vertical offset in font design units for …\nThe recommended vertical size in font design units for …\nThe 258 glyph names defined for Macintosh TrueType fonts\nA string in the post table.\npost (PostScript) table\nReturns the argument unchanged.\nArray of indices into the string data. See below for …\nCalls <code>U::from(self)</code>.\nSet to 0 if the font is proportionally spaced, non-zero if …\nItalic angle in counter-clockwise degrees from the …\nMaximum memory usage when an OpenType font is downloaded …\nMaximum memory usage when an OpenType font is downloaded.\nMinimum memory usage when an OpenType font is downloaded …\nMinimum memory usage when an OpenType font is downloaded.\nNumber of glyphs (this should be the same as numGlyphs in …\nThe number of glyph names covered by this table\nStorage for the string data.\nThis is the suggested distance of the top of the underline …\nSuggested values for the underline thickness. In general, …\n0x00010000 for version 1.0 0x00020000 for version 2.0 …\nState for processing the blend operator for DICTs and …\nCharacter set for mapping from glyph to string identifiers.\nCharset format 0.\nCharset format 1.\nCharset format 2.\nIterator over the glyph and string identifier mappings in …\nRange struct for Charset format 1.\nRange struct for Charset format 2.\nCharset with custom glyph id to string id mappings.\nErrors that are specific to PostScript processing.\nAssociates a glyph identifier with a Font DICT.\nFdSelect format 0.\nFdSelect format 3.\nFdSelect format 4.\nRange struct for FdSelect format 3.\nRange struct for FdSelect format 4.\nCommon type for uniform access to CFF and CFF2 index …\nAn array of variable-sized objects in a <code>CFF</code> table.\nAn array of variable-sized objects in a <code>CFF2</code> table.\nReference to a Latin-1 encoded string.\nEither a signed 32-bit integer or a 16.16 fixed point …\nThe PostScript standard string set.\nOperand stack for DICTs and charstrings.\nPostScript string identifier (SID).\nApply the <code>blend</code> operator.\nApply a prefix sum to decode delta-encoded numbers.\nReturns the raw bytes of the string.\nReturns an iterator over the characters of the string.\nParsing for PostScript charstrings.\nReturns the number of objects in the index.\nNumber of objects stored in INDEX.\nNumber of objects stored in INDEX.\nArray containing the object data.\nArray containing the object data.\nParsing for PostScript DICTs.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD selector array (one entry for each glyph).\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph in range.\nFirst glyph in range.\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph in range.\nFirst glyph in range.\nReturns an array of <code>N</code> 16.16 fixed point values starting at …\nReturns an iterator yielding all elements on the stack as …\nReturns the associated font DICT index for the given glyph …\nFormat = 0.\nFormat = 3.\nFormat = 4.\nFormat; =0\nFormat; =1\nFormat; =2\nFormat = 0.\nFormat; =0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the data for the object at the given index.\nReturns the data for the object at the given index.\nReturns the data for the object at the given index.\nReturns the 16.16 fixed point value at the given index on …\nReturns the 32-bit integer at the given index on the stack.\nReturns the offset at the given index.\nReturns the offset of the object at the given index.\nReturns the offset of the object at the given index.\nGlyph name array.\nReturns the glyph identifier for the given string …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all of the glyph and string …\nReturns true if the number of elements on the stack is odd.\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nNumber of ranges.\nNumber of ranges.\nCreates a new index from the given data.\nCreates an identifier from a 16-bit unsigned integer.\nCreates a new Latin-1 encoded string reference from the …\nReturns an iterator yielding all elements on the stack as …\nObject array element size.\nObject array element size.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nBytes containing <code>count + 1</code> offsets each of <code>off_size</code>.\nBytes containing <code>count + 1</code> offsets each of <code>off_size</code>.\nPops a 16.16 fixed point value from the top of the stack.\nPops a 32-bit integer from the top of stack.\nRange3 array.\nRange4 array.\nRange1 array.\nRange2 array.\nReturns the number of variation regions for the currently …\nReverse the order of all elements on the stack.\nReturns an iterator yielding scalars for each variation …\nSentinel GID. Set equal to the number of glyphs in the …\nSentinel GID. Set equal to the number of glyphs in the …\nSets the active variation store index.\nReturns the total size in bytes of the index table.\nReturns the total size in bytes of the index table.\nReturns the total size in bytes of the index table.\nResolves the identifier as a standard string.\nReturns the string identifier for the given glyph …\nComputes a bias that is added to a subroutine operator in a\nReturns the underlying identifier as a 16-bit unsigned …\nTrait for processing commands resulting from charstring …\nMaximum nesting depth for subroutine calls.\nBitmask defining the counter hints that should be made …\nEvaluates the given charstring and emits the resulting …\nBitmask defining the hints that should be made active for …\nHorizontal stem hint at <code>y</code> with height <code>dy</code>.\nVertical stem hint at <code>x</code> with width <code>dx</code>.\nComponents for computing a fixed point value for a binary …\nOperand for the <code>BlueValues</code>, <code>OtherBlues</code>, <code>FamilyBlues</code> and …\nPostScript DICT Operator with its associated operands.\nAffine matrix and scaling factor.\nA number parsed from a DICT. If the source was in binary …\nPostScript DICT operator.\nAn operator parsed from a DICT.\nOperand for the <code>StemSnapH</code> and <code>StemSnapV</code> operators.\nEither a PostScript DICT operator or a (numeric) operand.\nGiven a byte slice containing DICT data, returns an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a font matrix and a scaled UPEM, compute a new font …\nGiven a byte slice containing DICT data, returns an …\nReturns the fixed point value for the precomputed …\nBit 0: Set to 1.\nBit 1: Draw outlines.\nGlyph data table\nSbix header flags.\nThe sbix (Standard Bitmap Graphics) table\nStrike header table\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nThe actual embedded graphic data. The total length is …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nBit 0: Set to 1. Bit 1: Draw outlines. Bits 2 to 15: …\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nOffset from the beginning of the strike data header to …\nIndicates the format of the embedded graphic data: one of …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nNumber of bitmap strikes.\nThe horizontal (x-axis) position of the left edge of the …\nThe vertical (y-axis) position of the bottom edge of the …\nThe PPEM size for which this strike was designed.\nThe device pixel density (in PPI) for which this strike …\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nRemoves the specified flags in-place.\nOffsets from the beginning of the ‘sbix’ table to data …\nA dynamically resolving wrapper for <code>strike_offsets</code>.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nTable version number — set to 1.\nAxis Records\nAxis Value Tables\nAn array of AxisValue tables.\nAxis value table format 1\nAxis value table format 2\nAxis value table format 3\nAxis value table format 4\nPart of AxisValueFormat4\nAxis value table flags.\nIf set, it indicates that the axis value represents the …\nIf set, this axis value table provides axis value …\nSTAT (Style Attributes Table)\nReturns the set containing all flags.\nThe total number of axes contributing to this axis-values …\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nReturns axis index for format 1, 2 and 3 axis value tables\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nA value that applications can use to determine primary …\nA value that applications can use to determine primary …\nA tag identifying the axis of design variation.\nA tag identifying the axis of design variation.\nThe number of axis value tables.\nArray of offsets to axis value tables, in bytes from the …\nA dynamically resolving wrapper for <code>axis_value_offsets</code>.\nArray of AxisValue records that provide the combination of …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nAttempt to resolve <code>design_axes_offset</code>.\nOffset in bytes from the beginning of the STAT table to the\nThe number of axis records. In a font with an ‘fvar’ …\nThe size in bytes of each axis record.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nName ID used as fallback when projection of names into a …\nReturns an empty set of flags.\nFlags — see below for details.\nFlags — see below for details.\nFlags — see below for details.\nFlags — see below for details.\nFlags — see below for details.\nFormat identifier — set to 1.\nFormat identifier — set to 2.\nFormat identifier — set to 3.\nFormat identifier — set to 4.\nFormat identifier — set to 1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nThe numeric value for a style-linked mapping from this …\nReturns linked value for format 3 axis value tables\nA nominal numeric value for this attribute value.\nReturns the complement of this set of flags.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nOffset in bytes from the beginning of the STAT table to the\nAttempt to resolve <code>offset_to_axis_value_offsets</code>.\nThe maximum value for a range associated with the specified\nThe minimum value for a range associated with the specified\nA constructor that requires additional arguments.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nA numeric value for this attribute value.\nA numeric value for this attribute value.\nReturns axis value for format 1, 2 and 3 axis value tables\nA numeric value for this attribute value.\nA numeric value for this attribute value.\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nMajor/minor version number. Set to 1.2 for new fonts.\nSVGDocumentList\nSVGDocumentRecord\nThe SVG table\nArray of SVGDocumentRecords.\nThe last glyph ID for the range covered by this record.\nThe last glyph ID for the range covered by this record.\nReturns the argument unchanged.\nGet the raw data of the SVG document. Is not guaranteed to …\nCalls <code>U::from(self)</code>.\nNumber of SVGDocumentRecords. Must be non-zero.\nThe first glyph ID for the range covered by this record.\nThe first glyph ID for the range covered by this record.\nLength of the SVG document data. Must be non-zero.\nLength of the SVG document data. Must be non-zero.\nOffset from the beginning of the SVGDocumentList to an SVG …\nOffset from the beginning of the SVGDocumentList to an SVG …\nAttempt to resolve <code>svg_document_list_offset</code>.\nOffset to the SVGDocumentList, from the start of the SVG …\nTable version (starting at 0). Set to 0.\nThe tracking data table.\nSingle entry in a tracking table.\nThe tracking (trak) table.\nFormat of the tracking table (set to 0).\nReturns the argument unchanged.\nAttempt to resolve <code>horiz_offset</code>.\nOffset from start of tracking table to TrackData for …\nCalls <code>U::from(self)</code>.\nNumber of point sizes included in this table.\nNumber of separate tracks included in this table.\nThe ‘name’ table index for this track (a short word or …\nThe ‘name’ table index for this track (a short word or …\nOffset from the start of the tracking table to per-size …\nOffset from the start of the tracking table to per-size …\nReturns the list of per-size tracking values for this …\nReturns the size table for this set of tracking data.\nOffset from the start of the tracking table to the start …\nTrack value for this record.\nTrack value for this record.\nArray of TrackTableEntry records.\nVersion number of the tracking table (0x00010000 for the …\nAttempt to resolve <code>vert_offset</code>.\nOffset from start of tracking table to TrackData for …\n…\n…\nVARC (Variable Composites / Components Table)\nFlags used in the VarcComponent byte stream\nA VARC glyph doesn’t have any root level attributes, it…\nReturns the set containing all flags.\nFriendlier accessor than directly using raw data via Index2\nAttempt to resolve <code>axis_indices_list_offset</code>.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\n…\nAttempt to resolve <code>condition_list_offset</code>.\nA dynamically resolving wrapper for <code>condition_offsets</code>.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nAttempt to resolve <code>coverage_offset</code>.\nRead a specific delta set.\nAn Index2 where each item is a PackedDeltas\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nFriendlier accessor than directly using raw data via Index2\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nConvert decomposed form to 2x3 matrix form.\nAttempt to resolve <code>multi_var_store_offset</code>.\nReturns the complement of this set of flags.\nAttempt to resolve <code>region_list_offset</code>.\nA dynamically resolving wrapper for <code>region_offsets</code>.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAttempt to resolve <code>var_composite_glyphs_offset</code>.\nA dynamically resolving wrapper for <code>variation_data_offsets</code>.\nMajor/minor version number. Set to 1.0.\nMask for the low 12 bits to give the shared tuple records …\nImplements the logic for iterating over the individual runs\nThe type of values for a given delta run (influences the …\nOuter and inner indices for reading from an …\nThe DeltaSetIndexMap table\nThe DeltaSetIndexMap table format 0\nThe DeltaSetIndexMap table format 1\nFlag indicating that this tuple variation header includes …\nEntry format for a DeltaSetIndexMap.\nFloating point item delta computed by an item variation …\nTrait for applying floating point item deltas to target …\nMask for the low 4 bits, which give the count of bits …\nFlag indicating that this tuple variation table applies to …\nThe ItemVariationData subtable\nThe ItemVariationStore table\nMask for bits that indicate the size in bytes minus one of …\nFlag indicating that the serialized data for this tuple …\nPacked Deltas\nPacked “Point” Numbers\nAn iterator over the packed point numbers data.\nThe RegionAxisCoordinates record\nFlag indicating that some or all tuple variation tables …\nMask for the low 12 bits to give the shared tuple records …\nA Tuple Record\nTrait for deltas that are computed in a tuple variation …\nAn iterator over the deltas for a glyph.\nA single set of tuple variation data\nThe ‘tupleVariationCount’ field of the Tuple Variation …\nTupleVariationHeader\nA helper type for iterating over <code>TupleVariationHeader</code>s.\nAn iterator over the <code>TupleVariation</code>s for a specific glyph.\nThe VariationRegion record\nThe VariationRegionList table\nReads the set of deltas from this tuple variation.\nReads the set of deltas from this tuple variation.\nReturns an iterator over all of the pairs of (variation …\nReturns the set containing all flags.\nThe number of variation axes for this font. This must be …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nComputes the delta value for the specified index and set …\nComputes the delta value in floating point for the …\nComputes a scalar value for this region and the specified …\nCompute the fixed point scalar for this tuple at the given …\nComputes a floating point scalar value for this region and …\nCompute the floating point scalar for this tuple at the …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nThe number of points in this set\nthe length of one delta set\nReturns an iterator over the per-region delta values for …\nDelta-set rows.\nIterate over the deltas for this tuple.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\n<code>true</code> if the header includes an embedded peak tuple.\nReturns an empty set of flags.\nThe region end coordinate value for the current axis.\nThe region end coordinate value for the current axis.\nA packed field that describes the compressed …\nA packed field that describes the compressed …\nA packed field that describes the compressed …\nDeltaSetIndexMap format: set to 0.\nDeltaSetIndexMap format: set to 1.\nFormat— set to 1\nDeltaSetIndexMap format: set to 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nReturns the delta set index for the specified value.\nReturns true if this tuple provides deltas for all points …\nInner delta set index.\nInserts the specified flags in-place.\nIntermediate end tuple record for this tuple variation …\n<code>true</code> if the header includes the two intermediate region …\nIntermediate start tuple record for this tuple variation …\nIntermediate tuple records for this tuple variation table …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if the delta is a point and requires reading …\nThe number of delta sets for distinct items.\nA dynamically resolving wrapper for …\nThe number of item variation data subtables.\nOffsets in bytes from the start of the item variation …\nIterate over the packed points\nThe number of mapping entries.\nThe number of mapping entries.\nThe delta-set index mapping data. See details below.\nThe delta-set index mapping data. See details below.\nThe delta-set index mapping data. See details below.\nCreates a new delta for the given position and …\nThe run type for a given control byte\nReturns the complement of this set of flags.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nOuter delta set index.\nReturns the ‘peak’ tuple for this variation\nThe region peak coordinate value for the current axis.\nThe region peak coordinate value for the current axis.\nPeak tuple record for this tuple variation table — …\n<code>true</code> if the data for this table includes packed point …\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nArray of region axis coordinates records, in the order of …\nArray of region axis coordinates records, in the order of …\nThe number of variation region tables in the variation …\nThe number of variation regions referenced.\nArray of indices into the variation region list for the …\nRemoves the specified flags in-place.\n<code>true</code> if any tables reference a shared set of point numbers\nread point numbers off the front of this data, returning …\nThe region start coordinate value for the current axis.\nThe region start coordinate value for the current axis.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nA packed field. The high 4 bits are flags (see below). The …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nCoordinate array specifying a position within the font’s …\nCoordinate array specifying a position within the font’s …\nThe size in bytes of the serialized data for this tuple …\nAttempt to resolve <code>variation_region_list_offset</code>.\nOffset in bytes from the start of the item variation store …\nArray of variation regions.\nA packed field: the high bit is a flag—see details below.\nThe vhea Vertical Header Table\nMaximum advance height value in ‘vmtx’ table.\nTypographic ascent.\nThe amount by which a slanted highlight on a glyph needs …\nUsed to calculate the slope of the cursor (rise/run); 1 for\n0 for vertical caret, 1 for horizontal.\nTypographic descent.\nTypographic line gap. Negative LineGap values are treated …\n0 for current format.\nMinimum bottom sidebearing value\nMinimum top sidebearing value in ‘vmtx’ table for …\nNumber of advance heights in the vertical metrics (<code>vmtx</code>) …\nThe major/minor version (1, 1)\nDefined as max( tsb + (yMax-yMin)).\nThe vmtx (Vertical Metrics) table\nReturns the advance height for the given glyph identifier.\nA constructor that requires additional arguments.\nReturns the top side bearing for the given glyph …\nTop side bearings for glyph IDs greater than or equal to …\nPaired advance height and top side bearing values for each …\nVertical origin Y metrics record.\nThe VORG (Vertical Origin) table.\nThe y coordinate of a glyph’s vertical origin, in the …\nReturns the argument unchanged.\nGlyph index.\nGlyph index.\nCalls <code>U::from(self)</code>.\nNumber of elements in the vertOriginYMetrics array.\nMajor/minor version number. Set to 1.0.\nY coordinate, in the font’s design coordinate system, of …\nY coordinate, in the font’s design coordinate system, of …\nArray of VertOriginYMetrics records, sorted by glyph ID.\nReturns the y coordinate of the of the glyph’s vertical …\nThe VVAR (Vertical Metrics Variations) table\nReturns the advance height delta for the specified glyph …\nAttempt to resolve <code>advance_height_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nReturns the bottom side bearing delta for the specified …\nAttempt to resolve <code>bsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nAttempt to resolve <code>item_variation_store_offset</code>.\nOffset in bytes from the start of this table to the item …\nReturns the top side bearing delta for the specified glyph …\nAttempt to resolve <code>tsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nReturns the vertical origin delta for the specified glyph …\nAttempt to resolve <code>v_org_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nMajor version number of the horizontal metrics variations …")