searchState.loadedDescShard("zeno", 0, "This crate provides a high performance, low level 2D …\n8-bit alpha mask.\nRepresents an angle in degrees or radians.\nDescribes the size of an arc.\nDescribes the sweep direction for an arc.\nA straight line connecting the segments.\nOrigin (0, 0) at the bottom left of the image.\nAxis-aligned bounding box.\nFlat cap.\nDefines the shape to be drawn at the beginning or end of a …\nCloses a subpath, connecting the final point to the …\nPath command.\nCommand iterator.\nA cubic bezier curve from the previous point to the final …\n32-bit RGBA subpixel mask with custom offsets.\nThe incoming direction and location of the final vertex in …\nThe even-odd fill rule.\nDescribes the visual style of a fill.\nThe desired output image format for rendering.\nBuilder for configuring and executing a hit test.\nIdentity matrix.\nDefines the connection between two segments of a stroke.\nAn arc of &gt;= 180 degrees will be drawn.\nA straight line from the previous point to the specified …\nBuilder for configuring and rendering a mask.\nThe incoming direction, location, and outgoing direction …\nThe segments are extended to their natural intersection …\nBegins a new subpath at the specified point.\nThe arc is drawn in a negative angle direction.\nThe non-zero fill rule.\nThe origin of the coordinate system for rendering.\nTrait for types that accept path commands.\nTrait for types that represent path data.\nDescribes the offset and dimensions of a rendered mask.\nAlias for vector to distinguish intended use.\nThe arc is drawn in a positive angle direction.\nA quadratic curve from the previous point to the final …\nAn arc between the segments.\nRounded cap with radius equal to half the stroke width.\nScratch memory for reusable heap allocations.\nAn arc of &lt;= 180 degrees will be drawn.\nSquare cap with dimensions equal to half the stroke width.\nThe start point and direction of a subpath.\nDescribes the visual style of a stroke.\nRepresents the style of a path for rendering or hit …\n32-bit RGBA subpixel mask with 1/3 pixel offsets for the …\nOrigin (0, 0) at the top left of the image.\nTwo dimensional transformation matrix.\nTwo dimensional vector.\nAction of a path command.\nA vertex of a path.\nAn iterator over the vertices of a path.\nAn iterator like type that walks along a path by arbitrary …\nAngle of zero degrees.\nVector with both components set to zero.\nAdds a circle with the specified center and radius to the …\nAdds a circle with the specified center and radius to the …\nAdds an ellipse with the specified center and radii to the …\nAdds an ellipse with the specified center and radii to the …\nAdds a rectangle with the specified position and size to …\nAdds a rectangle with the specified position and size to …\nAdds a rounded rectangle with the specified position, size …\nAdds a rounded rectangle with the specified position, size …\nReturns the angle to the specified vector.\nApplies the style and transform to the path and emits the …\nApplies the style and transform to the path and emits the …\nAdds an arc with the specified x- and y-radius, rotation …\nAdds an arc with the specified x- and y-radius, rotation …\nComputes the bounding box of the path.\nComputes the bounding box of the path.\nReturns the necessary buffer size to hold an image of the …\nSets the cap style that will be generated at the start and …\nSets both the start and end cap styles for the stroke.\nReturns a new vector containing the smallest integer …\nCloses the current subpath.\nReturns an iterator over the commands described by the …\nGiven an origin, offset and bounding box, computes the …\nReturns true if the box contains the specified point.\nCopies the path data into the specified sink.\nCopies the path data into the specified sink.\nComputes the cross product of two vectors.\nReturns the current point of the path.\nAdds a cubic bezier curve from the current point through …\nSets the dash array and offset of the stroke. The default …\nLengths of dashes in alternating on/off order.\nReturns the determinant of the transform.\nReturns the distance between two points.\nComputes the dot product of two vectors.\nStyle for capping the end of an open subpath.\nReturns a new vector containing the largest integer values …\nSets the desired format of the mask. The default value is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new angle from degrees.\nCreates a new angle from gradians.\nCreates a new bounding box from a sequence of points.\nCreates a new angle from radians.\nCreates a new angle from turns.\nReturns the height of the bounding box.\nHeight in pixels.\nInvokes a closure with the format, width and height of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of the transform, if any.\nReturns true if the bounding box is empty.\nReturns true if the style is a stroke.\nSets the join style that determines how individual …\nStyle for connecting segments of the stroke.\nHorizontal offset with respect to the origin specified …\nComputes the total length of the path.\nReturns the length of the vector.\nReturns the squared length of the vector.\nAdds a line to the specified point. This will begin a new …\nSets the limit for miter joins beyond which a bevel will …\nLimit for miter joins.\nMoves to the specified point, beginning a new subpath.\nReturns true if this vector is approximately equal to …\nReturns true if this vector is approximately equal to …\nCreates a new hit test builder for the specified path data.\nCreates a new mask builder for the specified path data.\nCreates a new iterator like type that steps along a path …\nCreates a new vector with the specified coordinates.\nCreates a new transform.\nCreates a new bounding box from minimum and maximum points.\nCreates a new scratch memory context.\nCreates a new stroke style with the specified width.\nCreates a new iterator over the vertices of a path.\nReturns a normalized copy of the vector.\nSets the offset for the path’s rendered bounds. To …\nOffset of the first dash.\nSets the origin that defines the coordinate system for the …\nReturns a new transform that represents a rotation …\nReturns a new transform that represents a scale followed …\nReturns a new transform that represents a translation …\nAdds a quadratic bezier curve from the current point …\nAdds an arc with the specified x- and y-radius, rotation …\nAdds an arc with the specified x- and y-radius, rotation …\nAdds a cubic bezier curve from the current point through …\nAdds a cubic bezier curve from the current point through …\nAdds a line to the specified point, relative to the …\nAdds a line to the specified point, relative to the …\nMoves to the specified point, relative to the current …\nMoves to the specified point, relative to the current …\nAdds a quadratic bezier curve from the current point …\nAdds a quadratic bezier curve from the current point …\nReturns the remaining distance available to walk on the …\nRenders the mask to a newly allocated buffer.\nRenders the mask into a byte buffer. If specified, the …\nSets an additional rendering offset for the mask. This …\nCreates a rotation transform.\nCreates a rotation transform around a point.\nCreates a scale transform.\nSets whether or not scaling is applied to the stroke. The …\nTrue if the stroke width should be affected by the scale …\nSets an explicit size for the mask. If left unspecified, …\nCreates a skew transform.\nStyle for capping the beginning of an open subpath.\nSteps by the specified distance and returns the point at …\nSets the style of the path.\nSets the style of the path. The default is a non-zero fill.\nCreates a format for BGRA subpixel rendering.\nReturns true if the specified point is painted by the path.\nReturns a new transform that represents the application of …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nSets the threshold value for determining whether a hit …\nReturns the angle in degrees.\nReturns the angle in radians.\nVertical offset with respect to the origin specified when …\nSets the transformation matrix of the path.\nSets the transformation matrix of the path.\nReturns the result of a transformation matrix applied to …\nReturns the result of applying this transform to a point.\nReturns the result of applying this transform to a vector.\nCreates a translation transform.\nReturns an error indicating the first position of invalid …\nReturns the associated verb for the command.\nReturns the width of the bounding box.\nSets the width of the stroke. The default is 1.\nWidth in pixels.\nWidth of the stroke.\nCreates a new hit test builder for the specified path data …\nCreates a new mask builder for the specified path data and …\nCreates a new iterator like type that steps along a …\nCreates a new iterator over the vertices of a transformed …")