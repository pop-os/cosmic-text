searchState.loadedDescShard("ttf_parser", 0, "A high-level, safe, zero-allocation font parser for:\nA grayscale bitmap with 2 bits per pixel.\nA packed grayscale bitmap with 2 bits per pixel.\nA grayscale bitmap with 4 bits per pixel.\nA packed grayscale bitmap with 4 bits per pixel.\nA grayscale bitmap with 8 bits per pixel.\nA monochrome bitmap.\nA packed monochrome bitmap.\nA color bitmap with 32 bits per pixel.\nA list of errors that can occur during a CFF glyph …\nA font face.\nThe face index is larger than the number of faces in the …\nA list of font face parsing errors.\nParsed face tables.\nA 32-bit signed fixed-point number (16.16).\nA trait for parsing raw binary data of fixed size.\nA type-safe wrapper for glyph ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nA slice-like container that converts internal binary data …\nA slice-like container that converts internal binary data …\nAn iterator over <code>LazyArray16</code>.\nAn iterator over <code>LazyArray32</code>.\nA line metrics.\nAn attempt to read out of bounds detected.\nThe <code>head</code> table is missing or malformed.\nThe <code>hhea</code> table is missing or malformed.\nThe <code>maxp</code> table is missing or malformed.\nA face that is neither italic not obliqued.\nA variation coordinate in a normalized coordinate system.\nA typically-sloped version of the regular face.\nA trait for glyph outline construction.\nFace permissions.\nPhantom points.\nA platform ID.\nA float point.\nA glyph’s raster image.\nA glyph raster image format.\nA raw font face.\nA list of all supported tables as raw data.\nA rectangle.\nA rectangle described by the left-lower and upper-right …\nA RGBA color in the sRGB color space.\nObject’s raw data size.\nA script metrics used by subscript and superscript.\nA face style.\nA raw table record.\nA 4-byte tag.\nAn affine transform.\nUnicode Ranges.\nFace data must start with <code>0x00010000</code>, <code>0x74727565</code>, …\nA font variation value.\nA variation axis.\nA face weight.\nA face width.\nThe ‘a’ component of the transform.\nAn Anchor Point Table implementation.\nThis module contains Apple Advanced Typography Layout …\nReturns tag value as <code>u32</code> number.\nReturns a horizontal face ascender.\nAn Axis Variations Table implementation.\nAn axis tag name.\nThe ‘b’ component of the transform.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search using specified closure.\nPerforms a binary search using specified closure.\nBottom side bearing point.\nThe ‘c’ component of the transform.\nReturns face’s capital height.\nA Color Bitmap Data Table implementation.\nA Color Bitmap Location Table implementation.\nA Compact Font Format Table implementation.\nA Compact Font Format 2 Table implementation.\nAppends a ClosePath segment.\nA Character to Glyph Index Mapping Table implementation.\nReturns the number of palettes stored in the <code>COLR</code>+<code>CPAL</code> …\nA Color Table implementation.\nCombines two transforms with each other.\nChecks if ranges contain the specified character.\nA Color Palette Table implementation.\nAppends a CurveTo segment.\nThe ‘d’ component of the transform.\nA raw image data. It’s up to the caller to decode it.\nThe input font file data.\nReturns a horizontal face descender.\nThe ‘e’ component of the transform.\nThe ‘f’ component of the transform.\nA Feature Name Table implementation.\nReturns the number of fonts stored in a TrueType font …\nAn image format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new coordinate.\nCreates a new coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Tag</code> from bytes.\nCreates a <code>Tag</code> from bytes.\nCreates a new <code>Face</code> from provided <code>RawFaceTables</code>.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nA Font Variations Table implementation.\nA Glyph Definition Table implementation.\nReturns a value at <code>index</code>.\nReturns a value at <code>index</code>.\nReturns the coordinate value as f2.14.\nReturns a bounding box that large enough to enclose any …\nA Glyph Data Table implementation.\nReturns a tight glyph bounding box.\nReturns glyph’s horizontal advance.\nReturns glyph’s horizontal side bearing.\nResolves a Glyph ID for a code point.\nResolves a Glyph ID for a glyph name.\nReturns glyph’s name.\nParses glyph’s phantom points.\nReturns a reference to a glyph’s raster image.\nReturns a reference to a glyph’s SVG image.\nResolves a variation of a Glyph ID from two code points.\nReturns glyph’s vertical advance.\nReturns glyph’s vertical side bearing.\nReturns glyph’s vertical origin according to Vertical …\nA Glyph Positioning Table implementation.\nA Glyph Substitution Table implementation.\nA Glyph Variations Table implementation.\nChecks that face has non-default variation coordinates.\nA Font Header Table implementation.\nReturns rect’s height.\nReturns face’s height.\nImage height.\nA Horizontal Header Table implementation.\nA Horizontal/Vertical Metrics Table implementation.\nA Horizontal Metrics Variations Table implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that face is marked as <em>Bold</em>.\nReturns <code>true</code> if the glyph can be colored/painted using the …\nChecks whether a transform is the identity transform.\nChecks if array is empty.\nChecks if the array is empty.\nChecks that face is marked as <em>Italic</em>.\nChecks that face is marked as <em>Monospaced</em>.\nChecks if tag is null / <code>[0, 0, 0, 0]</code>.\nChecks that face is marked as <em>Oblique</em>.\nChecks if the face allows outline data to be embedded.\nChecks that face is marked as <em>Regular</em>.\nChecks if the face allows embedding a subset, further …\nChecks that face is variable.\nReturns face’s italic angle.\nA Kerning Table implementation.\nAn Extended Kerning Table implementation.\nReturns the last value.\nLeft side bearing point.\nReturns array’s length.\nReturns array’s length.\nReturns a horizontal face line gap.\nAppends a LineTo segment.\nAn Index to Location Table implementation.\nA Math Table implementation.\nA Maximum Profile Table implementation.\nAn Extended Glyph Metamorphosis Table implementation.\nAppends a MoveTo segment.\nA Metrics Variations Table implementation.\nA Naming Table implementation.\nA list of name ID’s.\nAn axis name in the <code>name</code> table.\nReturns a list of names.\nCreates a new <code>LazyArray</code>.\nCreates a new <code>LazyArray</code>.\nCreates a new transform with the specified components.\nCreates a new <code>RgbaColor</code>.\nCreates a new rotation transform.\nCreates a new scale transform.\nCreates a new skew transform.\nCreates a new translation transform.\nReturns a total number of glyphs in the face.\nThis module contains OpenType Layout supplementary tables …\nA OS/2 and Windows Metrics Table implementation.\nOutlines a glyph and returns its tight bounding box.\nPaints a color glyph from the <code>COLR</code> table.\nParses an object from a raw data.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nReturns face permissions.\nA pixels per em of the selected strike.\nLine position.\nA PostScript Table implementation.\nReturns the primary language.\nAppends a QuadTo segment.\nReturns a <code>RangeRecord</code> for a glyph.\nReturns the <code>RawFace</code> used to create this <code>Face</code>.\nReturns a language region.\nRight side bearing point.\nA Standard Bitmap Graphics Table implementation.\nSets a variation axis coordinate.\nReturns sub-array.\nA Style Attributes Table implementation.\nReturns face’s strikeout metrics.\nReturns face style.\nReturns face’s subscript metrics.\nReturns face’s superscript metrics.\nAn SVG Table implementation.\nReturns the raw data of a selected table.\nReturns the raw data of a selected table.\nAn array of table records.\nReturns low-level face tables.\nLine thickness.\nReturns tag as 4-element byte array.\nReturns tag as 4-element byte array.\nReturns a numeric representation of a weight.\nReturns a numeric representation of a width.\nTop side bearing point.\nA Tracking Table implementation.\nReturns a horizontal typographic face ascender.\nReturns a horizontal typographic face descender.\nReturns a horizontal typographic face line gap.\nReturns face’s underline metrics.\nReturns Unicode Ranges.\nReturns face’s units per EM.\nAn axis value.\nReturns an iterator over variation axes.\nReturns the current normalized variation coordinates.\nReturns a vertical face ascender.\nReturns a vertical face descender.\nReturns a vertical face height.\nReturns a vertical face line gap.\nA Vertical Header Table implementation.\nA Vertical Origin Table implementation.\nA Vertical Metrics Variations Table implementation.\nReturns face’s weight.\nReturns rect’s width.\nReturns face’s width.\nImage width.\nThe X-axis coordinate.\nHorizontal offset.\nReturns face’s x height.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nX offset.\nHorizontal face size.\nThe Y-axis coordinate.\nVertical offset.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nY offset.\nVertical face size.\nAn anchor point.\nAn Anchor Point Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns a list of anchor points for the specified glyph.\nAn Extended State Table.\nA State Table entry.\nA lookup table.\nA legacy state entry used by StateTable.\nA State Table.\nA type-safe wrapper for a kerning value offset.\nPredefined classes.\nReturns a glyph class.\nReturns a glyph class.\nReturns a class entry.\nReturns a class entry.\nAdditional data.\nAdditional data.\nEntry flags.\nEntry flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, advance to the next glyph before going to the new …\nIf set, remember this glyph as the marked glyph.\nChecks that entry has an offset.\nIf set, push this glyph on the kerning stack.\nIf set, reset the kerning data (clear the stack).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns kerning at offset.\nProduces a new state.\nA new state.\nA new state.\nReturns the next offset.\nParses an Extended State Table from a stream.\nParses a lookup table from raw data.\nPredefined states.\nReturns a value associated with the specified glyph.\nReturns a value offset.\nAn axis value map.\nA list of segment maps.\nAn iterator over maps.\nAn Axis Variations Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA normalized coordinate value obtained using default …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any segments.\nReturns the number of segments.\nMaps a single coordinate\nParses a table from raw data.\nThe segment maps array — one segment map for each axis …\nThe modified, normalized coordinate value.\nA Color Bitmap Data Table.\nReturns the argument unchanged.\nReturns a raster image for the glyph.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nA Color Bitmap Location Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nAn affine transformation matrix.\nA Compact Font Format Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the CID corresponding to a glyph ID.\nResolves a Glyph ID for a code point.\nReturns a glyph ID by a name.\nReturns a glyph name.\nReturns a glyph width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a font transformation matrix.\nReturns a total number of glyphs in the font.\nOutlines a glyph.\nParses a table from raw data.\nA Compact Font Format 2 Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nA character encoding subtable variant.\nGlyph was found in the variation encoding table.\nA result of a variation glyph mapping.\nA character encoding subtable.\nA format 0 subtable.\nA format 10 subtable.\nA format 12 subtable.\nA format 13 subtable.\nA format 14 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of subtables.\nAn iterator over <code>Subtables</code>.\nA Character to Glyph Index Mapping Table.\nGlyph should be looked in other, non-variation tables.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for all codepoints contained in this subtable.\nSubtable encoding.\nFirst character code covered.\nFirst character code of subrange.\nA subtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a subtable at an index.\nJust a list of 256 8bit glyph IDs.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nMaps a character to a glyph ID.\nResolves a variation of a glyph ID from two code points.\nArray of glyph indices for the character codes covered.\nArray of glyph indexes for character codes in the range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nChecks that the current encoding is Unicode compatible.\nReturns the number of subtables.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nSubtable platform.\nA list of subtables.\nThe composite mode ‘Clear’.\nA ClipBox.\nThe composite mode ‘Color’.\nThe composite mode ‘ColorBurn’.\nThe composite mode ‘ColorDodge’.\nA gradient extend.\nA composite mode\nThe composite mode ‘Darken’.\nThe composite mode ‘Destination’.\nThe composite mode ‘DestinationAtop’.\nThe composite mode ‘DestinationIn’.\nThe composite mode ‘DestinationOut’.\nThe composite mode ‘DestinationOver’.\nThe composite mode ‘Difference’.\nThe composite mode ‘Exclusion’.\nA gradient extend.\nAn iterator over stops of a gradient.\nThe composite mode ‘HardLight’.\nThe composite mode ‘Hue’.\nThe composite mode ‘Lighten’.\nA linear gradient\nA paint with a linear gradient.\nThe composite mode ‘Luminosity’.\nThe composite mode ‘Multiply’.\nThe composite mode ‘Overlay’.\nThe <code>Pad</code> gradient extend mode.\nA paint.\nA trait for color glyph painting.\nThe composite mode ‘Plus’.\nA radial gradient\nA paint with a radial gradient.\nThe <code>Reflect</code> gradient extend mode.\nThe <code>Repeat</code> gradient extend mode.\nThe composite mode ‘Saturation’.\nThe composite mode ‘Screen’.\nThe composite mode ‘SoftLight’.\nA paint with a solid color.\nThe composite mode ‘Source’.\nThe composite mode ‘SourceAtop’.\nThe composite mode ‘SourceIn’.\nThe composite mode ‘SourceOut’.\nThe composite mode ‘SourceOver’.\nA sweep gradient\nA paint with a sweep gradient.\nA Color Table.\nThe composite mode ‘Xor’.\nThe x of the center.\nThe y of the center.\nReturns the clip box for a glyph.\nThe color of the color stop.\nWhether the table contains a definition for the given …\nThe end angle.\nThe extend.\nThe extend.\nThe extend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current table has version 0.\nOutline a glyph and store it.\nPaint the stored outline using the provided color.\nPaints the color glyph.\nParses a table from raw data.\nPop the last clip path.\nPop the last layer.\nPop the last transform.\nPush a new clip path using the currently stored outline.\nPush a new clip path using the clip box.\nPush a new layer with the given composite mode.\nPush a transform.\nThe <code>r0</code> value.\nThe <code>r1</code> value.\nThe start angle.\nThe offset of the color stop.\nReturns an iterator over the stops of the linear gradient. …\nReturns an iterator over the stops of the radial gradient. …\nReturns an iterator over the stops of the sweep gradient. …\nThe <code>x0</code> value.\nThe <code>x0</code> value.\nThe <code>x1</code> value.\nThe <code>x1</code> value.\nThe <code>x2</code> value.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nThe <code>y0</code> value.\nThe <code>y0</code> value.\nThe <code>y1</code> value.\nThe <code>y1</code> value.\nThe <code>y2</code> value.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nA Color Palette Table.\nReturns the argument unchanged.\nReturns the color at the given index into the given …\nCalls <code>U::from(self)</code>.\nReturns the number of palettes.\nParses a table from raw data.\nA feature names.\nA list of feature names.\nAn iterator over <code>FeatureNames</code>.\nA setting name.\nA Feature Name Table.\nThe index of the default setting in the <code>setting_names</code>.\nThe feature’s exclusive settings. If set, the feature …\nThe feature’s ID.\nFinds a feature name by ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a feature name at an index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any feature names.\nReturns the number of feature names.\nThe <code>name</code> table index for the feature’s name in a …\nThe <code>name</code> table index for the feature’s name in a …\nA list of feature names. Sorted by <code>FeatureName.feature</code>.\nParses a table from raw data.\nThe setting.\nThe feature’s setting names.\nA Font Variations Table.\nA variation axis.\nA list of variation axes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn axis name in the <code>name</code> table.\nParses a table from raw data.\nA glyph class.\nA Glyph Definition Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns glyph’s class according to Glyph Class …\nReturns glyph’s mark attachment class according to Mark …\nReturns glyph’s variation delta at a specified index …\nChecks that face has Glyph Class Definition Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that glyph is a mark according to Mark Glyph Sets …\nParses a table from raw data.\nA Glyph Data Table.\nThe bounding box of the glyph. Unlike the <code>outline</code> method, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nAn Anchor Table.\nAn <code>Anchor</code> parsing helper.\nA <code>ValueRecord</code> pairs matrix used by <code>PairAdjustment</code>.\nA Cursive Attachment Positioning Subtable.\nA list of entry and exit <code>Anchor</code> pairs.\nA Device Table.\nA Device Table hinting values.\nAn array or ligature anchor matrices.\nA Mark Array.\nA Mark-to-Base Attachment Positioning Subtable.\nA Mark-to-Ligature Attachment Positioning Subtable.\nA Mark-to-Mark Attachment Positioning Subtable.\nA Pair Adjustment Positioning Subtable.\nA <code>ValueRecord</code> pairs set used by <code>PairAdjustment</code>.\nA list of <code>PairSet</code>s.\nA glyph positioning lookup subtable enumeration.\nA Single Adjustment Positioning Subtable.\nA Value Record.\nAn array of Value Records.\nA Device Table indexes into Item Variation Store.\nAn anchors matrix.\nA base coverage.\nNumber of columns in the matrix.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns an entry <code>Anchor</code> at index.\nReturns an exit <code>Anchor</code> at index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>ValueRecord</code> at index.\nReturns a <code>ValueRecord</code> pair using the second glyph.\nReturns a value at <code>index</code>.\nReturns a <code>ValueRecord</code> pair using specified classes.\nReturns an <code>AnchorMatrix</code> at index.\nReturns contained data at index.\nReturns an <code>Anchor</code> at position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the array is empty.\nChecks if the array is empty.\nChecks if the set is empty.\nChecks if the array is empty.\nChecks if the array is empty.\nReturns array’s length.\nReturns array’s length.\nReturns the number of items.\nReturns the array length.\nReturns the array length.\nA mark coverage.\nA list of mark anchors.\nNumber of rows in the matrix.\nHorizontal value, in design units.\nHorizontal adjustment for advance, in design units — …\nA <code>Device</code> table with horizontal adjustment for advance.\nReturns X-axis delta.\nA <code>Device</code> table with horizontal value.\nHorizontal adjustment for placement, in design units.\nA <code>Device</code> table with horizontal adjustment for placement.\nVertical value, in design units.\nVertical adjustment for advance, in design units — only …\nA <code>Device</code> table with vertical adjustment for advance.\nReturns Y-axis delta.\nA <code>Device</code> table with vertical value.\nVertical adjustment for placement, in design units.\nA <code>Device</code> table with vertical adjustment for placement.\nA list of glyphs for Alternate Substitution Subtable.\nA set of <code>AlternateSet</code>.\nA Alternate Substitution Subtable.\nGlyph components for one ligature.\nA <code>Ligature</code> set.\nA list of <code>Ligature</code> sets.\nA Ligature Substitution Subtable.\nA Multiple Substitution Subtable.\nA Reverse Chaining Contextual Single Substitution Subtable.\nA sequence of glyphs for Multiple Substitution Subtable.\nA list of <code>Sequence</code> tables.\nA Single Substitution Subtable.\nA glyph substitution lookup subtable enumeration.\nArray of alternate glyph IDs, in arbitrary order.\nGlyph components for one ligature.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLigature to substitute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the current subtable is <em>Reverse Chaining </em>…\nA list of substitute glyphs.\nA Glyph Variations Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nAn index format used by the Index to Location Table.\nA Font Header Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA bounding box that large enough to enclose any glyph from …\nAn index format used by the Index to Location Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nUnits per EM.\nA Horizontal Header Table.\nFace ascender.\nFace descender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFace line gap.\nNumber of metrics in the <code>hmtx</code> table.\nParses a table from raw data.\nHorizontal/Vertical Metrics.\nA Horizontal/Vertical Metrics Table.\nReturns advance for a glyph.\nWidth/Height advance for <code>hmtx</code>/<code>vmtx</code>.\nSide bearings for glyph IDs greater than or equal to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of metrics indexed by glyph ID.\nSum of long metrics + bearings.\nParses a table from raw data.\nReturns side bearing for a glyph.\nLeft/Top side bearing for <code>hmtx</code>/<code>vmtx</code>.\nA Horizontal Metrics Variations Table.\nReturns the advance width offset for a glyph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the left side bearing offset for a glyph.\nParses a table from raw data.\nReturns the right side bearing offset for a glyph.\nA kerning subtable format.\nA kerning pair.\nA kerning subtable.\nA format 0 subtable.\nA format 2 subtable.\nA format 3 subtable.\nA list of subtables.\nAn iterator over kerning subtables.\nA Kerning Table.\nSubtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nIndicates that subtable has a cross-stream values.\nIndicates that subtable uses a state machine.\nIndicates that subtable is for horizontal text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nReturns left glyph ID.\nReturns the number of subtables.\nGlyphs pair.\nA list of kerning pairs.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nReturns right glyph ID.\nA list of subtables.\nKerning value.\nIndicates that subtable is variable.\nA container of Anchor Points used by <code>Subtable4</code>.\nA state machine entry.\nAn extended kerning subtable format.\nA kerning subtable.\nA format 0 subtable.\nA format 1 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of extended kerning subtables.\nAn iterator over extended kerning subtables.\nAn Extended Kerning Table.\nAn action index.\nAnchor points.\nSubtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mark and current anchor points at action index.\nReturns kerning for a pair of glyphs.\nReturns kerning at action index.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nIndicates that subtable has a cross-stream values.\nIndicates that subtable uses a state machine.\nIndicates that subtable is for horizontal text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of kerning pairs.\nParses a table from raw data.\nA state table.\nA state table.\nA list of subtables.\nThe tuple count.\nIndicates that subtable is variable.\nLong offsets.\nShort offsets.\nAn Index to Location Table.\nReturns the argument unchanged.\nReturns glyph’s range in the <code>glyf</code> table.\nCalls <code>U::from(self)</code>.\nChecks if there are any offsets.\nReturns the number of offsets.\nParses a table from raw data.\nA Math Constants Table.\nA Glyph Assembly Table.\nA Math Glyph Construction Table.\nA mapping from glyphs to Math Glyph Construction Tables.\nA Math Glyph Info Table.\nDetails for a glyph part in an assembly.\nDescription of math glyph variants.\nA Math Kern Table.\nAn entry in a Math Kern Info Table.\nA Math Kern Info Table.\nA Math Value with optional device corrections.\nA mapping from glyphs to Math Values.\nGlyph part flags.\nA Math Table.\nA Math Variants Table.\nMaximum (ink) height of accent base that does not require …\nAdvance width/height, in design units, of the variant …\nA general recipe on how to construct a variant with large …\nAxis height of the font.\nThe kerning data for the bottom-left corner.\nThe kerning data for the bottom-right corner.\nMath positioning constants.\nNumber of heights at which the kern value changes.\nMinimum height required for a delimited expression …\nDevice corrections for this value.\nMinimum height of n-ary operators (such as integral and …\nLengths of the connectors on the end of the glyph, in font …\nGlyphs which are <em>extended shapes</em>.\nMaximum (ink) height of accent base that does not require …\nMinimum tolerated gap between the (ink) top of the …\nStandard shift down applied to the denominator in display …\nMinimum tolerated gap between the (ink) top of the …\nStandard shift down applied to the denominator.\nMinimum tolerated gap between the (ink) bottom of the …\nStandard shift up applied to the numerator in display …\nMinimum tolerated gap between the (ink) bottom of the …\nStandard shift up applied to the numerator.\nThickness of the fraction bar.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe full advance of the part, in font design units.\nReturns the value for the glyph or <code>None</code> if it is not …\nReturns the kerning info for the glyph or <code>None</code> if it is …\nReturns the construction for the glyph or <code>None</code> if it is …\nGlyph ID for the part.\nPer-glyph positioning information.\nThe correction height at the given index.\nConstructions for shapes growing in the horizontal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-glyph italics correction values.\nThe italics correction of the assembled glyph.\nThe kern value at the given index.\nPer-glyph information for mathematical kerning.\nMinimum distance between baseline of the lower limit and …\nMinimum gap between (ink) top of the lower limit, and …\nWhite space to be left between math formulas to ensure …\nMinimum overlap of connecting glyphs during glyph …\nExtra white space reserved above the overbar.\nThickness of overbar.\nDistance between the overbar and the (ink) top of he base.\nParses a table from raw data.\nPart flags.\nParts the assembly is composed of.\nHeight of the bottom of the radical degree, if such is …\nSpace between the (ink) top of the expression and the bar …\nExtra white space reserved above the radical.\nNegative kern after the degree of a radical, if such is …\nExtra horizontal kern before the degree of a radical, if …\nThickness of the radical rule.\nSpace between the (ink) top of the expression and the bar …\nPercentage of scaling down for level 1 superscripts and …\nPercentage of scaling down for level 2 (scriptScript) …\nHorizontal distance between the top and bottom elements of …\nVertical distance between the ink of the top and bottom …\nExtra white space to be added after each subscript and …\nStandard shift down applied to the bottom element of a …\nStandard shift down applied to the bottom element of a …\nMinimum gap between (ink) bottom of the top element of a …\nMinimum gap between (ink) bottom of the top element of a …\nStandard shift up applied to the top element of a stack in …\nStandard shift up applied to the top element of a stack.\nLengths of the connectors on the start of the glyph, in …\nStandard shift down applied to the bottom element of the …\nMinimum gap between the ink of the stretched element, and …\nMinimum gap between the ink of the stretched element, and …\nStandard shift up applied to the top element of the …\nMinimum gap between the superscript and subscript ink.\nMinimum allowed drop of the baseline of subscripts …\nThe standard shift down applied to subscript elements.\nMaximum allowed height of the (ink) top of subscripts that …\nMaximum allowed drop of the baseline of superscripts …\nThe maximum level to which the (ink) bottom of superscript …\nMinimum allowed height of the (ink) bottom of superscripts …\nStandard shift up applied to superscript elements.\nStandard shift of superscripts relative to the base, in …\nPer-glyph horizontal positions for attaching mathematical …\nThe kerning data for the top-left corner.\nThe kerning data for the top-right corner.\nExtra white space reserved below the underbar.\nThickness of underbar.\nDistance between underbar and (ink) bottom of the base.\nMinimum distance between baseline of upper limit and (ink) …\nMinimum gap between the (ink) bottom of the upper limit, …\nThe X or Y value in font design units.\nThe ID of the variant glyph.\nPrepared variants of the glyph with varying advances.\nVariants and assembly recipes for growable glyphs.\nConstructions for shapes growing in the vertical direction.\nA Maximum Profile Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total number of glyphs in the face.\nParses a table from raw data.\nA metamorphosis chain.\nA list of metamorphosis chains.\nAn iterator over metamorphosis chains.\nA contextual subtable state table trailing data.\nA contextual subtable.\nA subtable coverage.\nThe feature table is used to compute the sub-feature flags …\nA contextual subtable state table trailing data.\nAn insertion subtable.\nA ligature subtable.\nA subtable in a metamorphosis chain.\nA subtable kind.\nA list of subtables in a metamorphosis chain.\nAn iterator over a metamorphosis chain subtables.\nAn Extended Glyph Metamorphosis Table.\nA list of metamorphosis chains.\nLigature components.\nA subtable coverage.\nA current index.\nA current insert index.\nDefault chain features.\nComplement of flags for the settings that this feature and …\nFlags for the settings that this feature and setting …\nSubtable feature flags.\nA list of chain features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsertion glyphs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this subtable will be applied to both horizontal …\nIf true, this subtable will process glyphs in descending …\nIf true, this subtable will process glyphs in logical order\nIf true, this subtable will only be applied to vertical …\nThe type of feature.\nA subtable kind.\nLigature actions.\nLigatures.\nReturns a Lookup at index.\nA mark index.\nA marked insert index.\nParses a table from raw data.\nThe feature’s setting (aka selector).\nThe contextual glyph substitution state table.\nA state table.\nA state table.\nA list of chain subtables.\nA Metrics Variations Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a metric offset by tag.\nParses a table from raw data.\nA Name Record.\nA list of face names.\nAn iterator over face names.\nA platform ID.\nA Naming Table.\nA platform-specific encoding ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a name at index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any name records.\nChecks that the current Name data has a Unicode encoding.\nReturns a Name language.\nA language ID.\nReturns a number of name records.\nA raw name data.\nA list of name ID’s.\nA Name ID.\nA list of names.\nParses a table from raw data.\nA platform ID.\nReturns the Name’s data as a UTF-8 string.\nA Chained Contextual Lookup Subtable.\nA Chained Sequence Rule.\nA set of <code>ChainedSequenceRule</code>.\nA list of <code>ChainedSequenceRule</code> sets.\nA value of Class Definition Table.\nA Class Definition Table.\nA Contextual Lookup Subtable.\nA Coverage Table.\nA Feature.\nAn index in <code>FeatureList</code>.\nA list of <code>Feature</code> records.\nA Feature Variations Table.\nSimple glyph contexts.\nSimple glyph contexts.\nClass-based glyph contexts.\nClass-based glyph contexts.\nCoverage-based glyph contexts.\nCoverage-based glyph contexts.\nAn index in <code>LanguageSystemList</code>.\nA Language System Table.\nA list of <code>LanguageSystem</code> records.\nA Layout Table.\nA Lookup Table.\nLookup table flags.\nAn index in <code>LookupList</code>.\nA list of <code>Lookup</code> values.\nA trait for parsing Lookup subtables.\nA list of lookup subtables.\nAn iterator over lookup subtables.\nA record that describes a range of glyph IDs.\nA data storage used by <code>ScriptList</code>, <code>LanguageSystemList</code> and …\nA trait to parse item in <code>RecordList</code>.\nAn iterator over <code>RecordList</code> values.\nA Script Table.\nAn index in <code>ScriptList</code>.\nA list of <code>Script</code> records.\nA sequence rule record.\nA sequence rule.\nA set of <code>SequenceRule</code>s.\nA list of <code>SequenceRuleSet</code>s.\nAn index in <code>FeatureVariations</code>.\nContains either glyph IDs or glyph Classes.\nChecks that glyph is present.\nReturns the subtable coverage.\nReturns the subtable coverage.\nDefault language.\nLast glyph ID in the range\nArray of indices into the FeatureList, in arbitrary order.\nA list of all supported features.\nReturns RecordList value by <code>Tag</code>.\nReturns a <code>VariationIndex</code> for variation coordinates.\nReturns a <code>Feature</code> at specified indices.\nLookup qualifiers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns RecordList value by index.\nParses a subtable at index.\nReturns the coverage index of the glyph or <code>None</code> if it is …\nReturns the glyph class of the glyph (zero if it is not …\nReturns RecordList value index by <code>Tag</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator over subtables.\nChecks that RecordList is empty.\nChecks if there are any items.\nList of supported languages, excluding the default one. …\nReturns a number of items in the RecordList.\nReturns a number of items in the LookupSubtables.\nContains either glyph IDs or glyph Classes.\nA list of all lookups.\nIndex into GDEF mark glyph sets structure.\nParses raw data.\nParses raw data.\nIndex of a feature required for this language system.\nA list of all supported scripts.\nFirst glyph ID in the range\nAvailable subtables.\nScript tag.\nLanguage tag.\nCoverage Index of first glyph ID in range.\nUsed to substitute an alternate set of lookup tables to …\nArray of glyph IDs. Sorted.\nArray of glyph ranges. Ordered by <code>RangeRecord.start</code>.\nA form that is generally cursive in nature.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nFace permissions.\nA script metrics used by subscript and superscript.\nA face style.\nA OS/2 and Windows Metrics Table.\nUnicode Ranges.\nA face weight.\nA face width.\nReturns capital height.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if face is bold.\nChecks if the face allows outline data to be embedded.\nChecks if the face allows embedding a subset, further …\nParses a table from raw data.\nReturns face permissions.\nReturns strikeout metrics.\nReturns style.\nReturns subscript metrics.\nReturns superscript metrics.\nReturns typographic ascender.\nReturns typographic descender.\nReturns typographic line gap.\nReturns Unicode ranges.\nChecks if typographic metrics should be used.\nTable version.\nReturns weight class.\nReturns face width.\nReturns Windows ascender.\nReturns Windows descender.\nReturns x height.\nX offset.\nHorizontal face size.\nY offset.\nVertical face size.\nAn iterator over glyph names.\nA PostScript Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a glyph ID by a name.\nReturns a glyph name by ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlag that indicates that the font is monospaced.\nItalic angle in counter-clockwise degrees from the …\nReturns an iterator over glyph names.\nParses a table from raw data.\nUnderline metrics.\nA strike of glyphs.\nA list of <code>Strike</code>s.\nAn iterator over <code>Strikes</code>.\nA Standard Bitmap Graphics Table.\nSelects the best matching <code>Strike</code> based on <code>pixels_per_em</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a glyph data.\nReturns a strike at the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any glyphs.\nChecks if there are any strikes.\nReturns the number of glyphs in this strike.\nReturns the number of strikes.\nParses a table from raw data.\nThe pixels per EM size for which this strike was designed.\nThe device pixel density (in PPI) for which this strike …\nA list of <code>Strike</code>s.\nThe axis record struct provides information about a single …\nAxis-value pairing for <code>AxisValueSubtableFormat4</code>.\nFlags for <code>AxisValueSubtable</code>.\nAn axis value subtable.\nAxis value subtable format 1.\nAxis value subtable format 2.\nAxis value subtable format 3.\nAxis value subtable format 4.\nIterator over axis value subtables.\nA Style Attributes Table.\nList of axes\nZero-based index into <code>Table::axes</code>.\nZero-based index into <code>Table::axes</code>.\nZero-based index into <code>Table::axes</code>.\nZero-based index into <code>Table::axes</code>.\nReturns <code>true</code> if the axis subtable either is the value or …\nIf set, this value is the normal (a.k.a. “regular”) …\nFallback name when everything can be elided.\nFlags for <code>AxisValueSubtable</code>.\nFlags for <code>AxisValueSubtable</code>.\nFlags for <code>AxisValueSubtable</code>.\nFlags for <code>AxisValueSubtable</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the axis subtable has the …\nReturns <code>true</code> if the axis subtable has the …\nNumeric value for a style-linked mapping.\nReturns the associated name ID.\nThe name ID for entries in the ‘name’ table that …\nNominal numeric value for this record.\nIf set, this value also applies to older versions of this …\nSort order for e.g. composing font family or face names.\nParses a table from raw data.\nThe maximum value for this record.\nThe minimum value for this record.\nReturns the first matching subtable for a given axis.\nReturns an iterator over the collection of axis value …\nAxis tag.\nReturns the value from an axis value subtable.\nNumeric value for this axis.\nNumeric value for this record.\nNumeric value for this record.\nThe name ID of the display string.\nThe name ID of the display string.\nThe name ID of the display string.\nThe name ID of the display string.\nList of axis-value pairings.\nAn SVG documents.\nA list of SVG documents.\nAn iterator over <code>SvgDocumentsList</code> values.\nAn SVG Table.\nThe SVG document data.\nA list of SVG documents.\nThe last glyph ID, <em>inclusive</em>, for the range covered by …\nReturns a SVG document data by glyph ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns SVG document data at index.\nReturns the glyphs range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the list is empty.\nReturns the number of SVG documents in the list.\nParses a table from raw data.\nThe first glyph ID for the range covered by this record.\nA Tracking Table.\nA single track.\nA track data.\nA list of tracks.\nAn iterator over <code>Tracks</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a track at index.\nHorizontal track data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any tracks.\nReturns the number of tracks.\nThe <code>name</code> table index for the track’s name.\nParses a table from raw data.\nA list of sizes.\nA list of tracks.\nA track value.\nA list of tracking values for each size.\nVertical track data.\nA Vertical Header Table.\nFace ascender.\nFace descender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFace line gap.\nNumber of metrics in the <code>vmtx</code> table.\nParses a table from raw data.\nA Vertical Origin Table.\nVertical origin metrics for the Vertical Origin Table.\nDefault origin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlyph ID.\nReturns glyph’s Y origin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of metrics for each glyph.\nParses a table from raw data.\nY coordinate, in the font’s design coordinate system, of …\nA Vertical Metrics Variations Table.\nReturns the advance height offset for a glyph.\nReturns the bottom side bearing offset for a glyph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns the top side bearing offset for a glyph.\nReturns the vertical origin offset for a glyph.")